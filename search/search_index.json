{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Acceuil/","title":"Acceuil","text":""},{"location":"Acceuil/#pc001-web-development","title":"PC001-Web development","text":""},{"location":"Acceuil/#description","title":"Description","text":"<p>The aim of this course is to teach methods and techniques that enable managers to lead large projects while controlling costs, avoiding delays, and ensuring quality. The students will be taught the key tools for project Management. They will have to apply them to a very concrete project: A Web site Design based on customer requirements.</p>"},{"location":"Acceuil/#course-goals","title":"Course goals","text":"<p>\u2794  Understand the technologies and protocols underlying the Web Discover the evolution of the Web, from its creation to the present day. \u2794 Master HTML5 and CSS3 standards to create and style Web pages. \u2794 Understand the basics of JavaScript: dynamic functionalities on the Web. \u2794 Discover the tools required for modern client-side Web development.  </p>"},{"location":"Acceuil/#project-requirements","title":"Project requirements","text":"<ul> <li> <p>The students will be organized in 4 groups (including a Project leader, a Technical Manager, a Design manager and a Communication Manager), and will work on 4 different Websites (Museum, School, Travel Agency and Restaurant). </p> </li> <li> <p>Through the course, the students will have to face practical issues jeopardizing or slowing down the process, to enable them to cope with it in their future professional life.</p> </li> <li> <p>They will be assessed both on the quality of the final web site design presentation and the way they handled the critical situation during the project development.</p> </li> </ul>"},{"location":"Acceuil/#course-schedule-from-february-26-to-march-22","title":"Course schedule: From February 26 to March 22","text":""},{"location":"Acceuil/#week-1-from-february-26-to-march-1","title":"Week 1: From February 26 to March 1","text":"<p>Chapter 1: Introduction to the web</p> <ul> <li>History of the web</li> <li>Client-server architecture</li> <li>Static vs dynamic web</li> <li>The difference between front-end and back-end </li> <li>Website editors and frameworks</li> </ul> <p>Chapter 2: Master the basic technologies of client-side Web development</p> <ul> <li>HTML: presentation, DOM, structuring an html page and the notion of tags </li> <li>CSS: presentation, selector types and responsive design</li> <li>JavaScript basics: Basic concepts, functions and arrays, callback Functions, - events and DOM manipulation</li> <li>Advanced JavaScript: Objects, JSON and Storage. </li> </ul> <p>Practical work</p> <ul> <li>Project presentation</li> <li>Create groups</li> <li>Choose a project theme</li> <li>Creation of HTML, CSS and JavaScript pages for the project</li> </ul>"},{"location":"Acceuil/#week-2-from-march-4-to-march-8","title":"Week 2: From March 4 to March 8","text":"<p>Chapitre 3: Discover a modern web framework: Vue.Js</p> <ul> <li>Introduction to Vue.js</li> <li>Installation</li> <li>Vue instance </li> <li>Directives Vue.js </li> <li>Components </li> <li>Single File Component (SFC) </li> <li>Vue Router </li> </ul> <p>Practical work </p> <ul> <li>Creation of a Vue CLI project</li> <li>Translation of project pages (html, css and javascript) into components</li> <li>Configuration of the different routes in index.js file.</li> </ul>"},{"location":"Acceuil/#week-3-from-march-11-to-march-15","title":"Week 3: From March 11 to March 15","text":"<p>Chapitre 4: Introduction to the server side</p> <ul> <li>Web server definition </li> <li>HTTP / HTTPS protocols </li> <li>HTTP request methods (GET, POST) </li> </ul> <p>Chapitre 5: Node.js / Express.js</p> <ul> <li>Introduction to Node.js</li> <li>Node.js modules</li> <li>Framework Express.js</li> <li>Callbacks and Promises</li> </ul> <p>Practical work </p> <ul> <li>Implement http methods on the project website.</li> </ul>"},{"location":"Acceuil/#week-4-from-march-18-to-march-22","title":"Week 4 : From March 18 to March 22","text":"<p>Chapitre 6: Authentication and database (security, data persistence)</p> <ul> <li>Authentication: user registration, hash with bcrypt</li> <li>Connecting a MySQL database to a Node.js application</li> <li>Executing SQL queries on a MySQL database with NodeJS</li> <li>Using a MySQL database in NodeJS with Sequelize</li> </ul> <p>Practical work</p> <ul> <li>Create and configure a database for project website.</li> <li>Final presentation: demonstration of the project functionalities</li> </ul>"},{"location":"Acceuil/#suggested-resources","title":"Suggested resources","text":"<ul> <li>Mozilla Developer Network(MDN) :developper mozzilla</li> <li>StackOverflow :stackoverflow </li> </ul>"},{"location":"Chapter%201/","title":"Chapter 1 : An introduction to the web","text":""},{"location":"Chapter%201/#table-of-contents","title":"Table of contents","text":"<ul> <li>History of the web</li> <li>Client-server architecture</li> <li>Static vs dynamic web</li> <li>The difference between front-end and back-end </li> <li>Website editors and frameworks</li> </ul>"},{"location":"Chapter%201/#the-web-what-you-need-to-know","title":"The Web: what you need to know!","text":""},{"location":"Chapter%201/#a-little-bit-of-history","title":"A little bit of history\u2026","text":""},{"location":"Chapter%201/#what-is-the-internet","title":"What is the Internet?","text":"<p>A global computer network consisting of a set of national, regional and private networks (networks of networks), which are linked by the TCP/IP communication protocol and which work together to provide a unique interface to their users.</p> <p>TCP/IP communication protocol: (Transmission Control Protocol/Internet Protocol) Is a set of rules used to enable communication between devices on a computer network. It is widely used as a communications protocol on the Internet, and is also used in many local area networks (LANs) and corporate networks.</p>"},{"location":"Chapter%201/#network-computer-network","title":"Network &amp; Computer network","text":""},{"location":"Chapter%201/#communication-protocol-tcpip-suite","title":"Communication protocol &amp; TCP/IP suite","text":""},{"location":"Chapter%201/#the-key-players-of-the-internet","title":"The key players of the Internet","text":""},{"location":"Chapter%201/#some-examples-of-internet-protocols","title":"Some examples of Internet protocols","text":""},{"location":"Chapter%201/#internet-services","title":"Internet services","text":""},{"location":"Chapter%201/#world-wide-web-www","title":"World Wide Web (WWW)","text":""},{"location":"Chapter%201/#web-evolution","title":"Web evolution","text":""},{"location":"Chapter%201/#how-does-the-web-work","title":"How does the Web work?","text":""},{"location":"Chapter%201/#web-servers","title":"Web servers","text":"<p>\u2794 A program can be both server and client of other servers. \u2794 retrieving a web page that contains information from a database </p> <p></p>"},{"location":"Chapter%201/#client-server","title":"Client / Server","text":"<p>\u2022 The DNS (Domain Name System) protocol allow to match an IP address with a name in order to avoid to retain IP addresses. Exemple : 195.83.142.250 \u2794</p> <p></p> <p>\u2022 The FQDN allows access to a machine on which a number of resources are available and which are served by different protocols. \u2022 A URL (Uniform Resource Location) allows to specify which resources to reach, and with which protocol.</p> <p></p>"},{"location":"Chapter%201/#static-vs-dynamic-web","title":"Static vs dynamic web","text":""},{"location":"Chapter%201/#a-static-web-page","title":"A static WEB page","text":"<p>\u2022 Visible as designed \u2022 Can present different forms of content: images, flash animations, video, music, etc. \u2022 Its content does not change =&gt; Static  \u2022 Stored in the Web server which only displays it when requested  \u2022 The entire code that composes it is interpreted directly by the client (Web browser) </p> <p></p>"},{"location":"Chapter%201/#composition-of-a-web-page","title":"Composition of a web page","text":""},{"location":"Chapter%201/#example-of-a-web-page-managing-a-cv-library","title":"Example of a web page managing a CV-library","text":"<p>\u2022  File://  : local protocol       - Files must be accessible on the machine used to view them       - Files are not served by a web server \u2022  http:// : client-server protocol       - Files are retrieved from the web server machine to the client machine (web browser)       - Files are served by a server usually on another machine </p> <p> Rq  :(firefox et chrome) :[ctrl]+[maj]+i  gives access to a tool panel allowing to visualize the network exchanges</p> <p></p>"},{"location":"Chapter%201/#static-web-advantages-and-disadvantages","title":"Static Web: advantages and disadvantages","text":""},{"location":"Chapter%201/#a-dynamic-web-page","title":"A dynamic web page","text":""},{"location":"Chapter%201/#dynamic-web-site-advantages","title":"Dynamic Web site: advantages","text":""},{"location":"Chapter%201/#dynamic-web-site-disadvantages","title":"Dynamic Web site: disadvantages","text":""},{"location":"Chapter%201/#the-difference-between-front-end-and-back-end","title":"The difference between front-end and back-end","text":""},{"location":"Chapter%201/#the-back-end-its-competences","title":"The Back-end: its competences","text":"<p>The Back-End is divided into three essential parts:  Server (or web hosting): seen as a hard disk accessible 24 hours a day, on which the pages of the website are stored. Databases: comparable to a large table with columns containing the necessary information on which the development is based, for example \"name\", \"first name\", \"password\", \"current purchase\". Dynamic programming languages: allow to keep, process, modify data and provide updated information on a website (such as news, product sheets, images, videos, etc.). The most used languages are PHP, Ruby, Python, SQL  Frameworks: to make the code clearer, easier to modify and simpler to maintain as a team, for example: CakePHP, Symphony</p>"},{"location":"Chapter%201/#website-editors-and-frameworks","title":"Website editors and frameworks","text":""},{"location":"Chapter%201/#website-editors","title":"Website editors","text":""},{"location":"Chapter%201/#some-examples","title":"Some examples","text":""},{"location":"Chapter%201/#frameworks","title":"Frameworks","text":""},{"location":"Chapter%201/#content-management-system-cms","title":"Content Management System (CMS)","text":""},{"location":"Chapter%201/#content-management-system-some-examples","title":"Content Management System (Some examples)","text":""},{"location":"Chapter%201/#content-management-system-useful-links","title":"Content Management System (Useful links)","text":""},{"location":"Chapter%202/","title":"Chapter 2 : Master the basic technologies of client-side Web development","text":""},{"location":"Chapter%202/#table-of-contents","title":"Table of contents","text":"<ul> <li>HTML: presentation, DOM, structuring an html page and the notion of tags </li> <li>CSS: presentation, selector types and responsive design</li> <li>JavaScript basics: Basic concepts, functions and arrays, callback Functions, - events and DOM manipulation</li> <li>Advanced JavaScript: Objects, JSON and Storage. </li> </ul>"},{"location":"Chapter%202/#introduction","title":"Introduction","text":""},{"location":"Chapter%202/#web-page-languages-frontend","title":"Web page languages Frontend","text":""},{"location":"Chapter%202/#why-learn-these-languages","title":"Why learn these languages?","text":""},{"location":"Chapter%202/#the-w3c-world-wide-web-consortium","title":"The W3C ! (World Wide Web Consortium)","text":"<p>Check your code : https://validator.w3.org/</p>"},{"location":"Chapter%202/#html-hypertext-markup-language","title":"HTML : HyperText Markup Language","text":"<p> HTML : its versions</p> <p></p> <p> HTML : the basics </p> <p></p> <p> HTML : the Doctype </p> <p> <code>&lt;!DOCTYPE html&gt;</code>  \u2022 A Doctype is a line of code used to indicate the type of your document. \u2022 It specifies the defined standards that you will use in this document. \u2022 The line of code containing the Doctype is inserted at the very beginning of the page. You can place it on the first line of your HTML document if you wish.  \u2022 The Doctype should always be before the <code>&lt;HTML&gt;</code> tag. \u2022 For a developer, the Doctype is used to validate his pages according to the chosen W3C standards.  \u2022 Its main purpose is to tell browsers how to interpret the document - or web page.With the arrival of HTML 5, the doctype was thus simplified to the maximum: </p> <p> Create your first web page  To create a web page, all you need to do is:  - Use your favorite text editor (Visual studio code, Sublime Text or other).  - Create a file with the \".html\" extension and save it  - Open the file you've created by double-clicking on the file icon, which by default will be your browser's icon. </p> <p>A web page is made up of two parts:</p> <ul> <li>The <code>&lt;head&gt;</code> header: general information about the page: its title, encoding (for handling special characters), etc.</li> </ul> <p>This information is not displayed on the page \u2794 information intended for the computer</p> <ul> <li>The body <code>&lt;body&gt;</code>: this is where the main part of the page is located; anything written here will be displayed on the screen.</li> </ul> <p> </p> <p>To execute the html page, you need to run the file: </p> <p> </p> <p> Html: Basics </p> <ul> <li>Any open tag must be closed: <code>&lt;tag&gt; ... &lt;/tag&gt;</code>     \u2022 Example: <code>&lt;html&gt; ... &lt;/html&gt;</code></li> <li>Empty tags can be self-closing:     \u2022 Example : <code>&lt;br/&gt;</code></li> <li>Nesting possible but no overlap:      \u2022 Example : <code>&lt;tag 1&gt;&lt;tag 2&gt;&lt;/tag 1&gt;&lt;/tag 2&gt;</code>\u2794 <code>&lt;tag 1&gt; &lt;tag 2&gt; &lt;/tag 2&gt; &lt;/tag 1&gt;</code> </li> <li>DOCTYPE is case-sensitive </li> <li>Attributes always have a value, and the value is always enclosed in single or double quotation marks. </li> <li>Attributes are separated from their value by \"=\". </li> <li>Attributes are separated from each other by at least one blank character (space, line feed, tab). </li> </ul> Note: In HTML 5, attributes are not case-sensitive, but this is not the case in XML dialects: attributes must always be written in lower case. <p> Examples of tags   - The paragraphs: <code>&lt;p&gt; paragraph &lt;/p&gt;</code>   - Go to line: <code>&lt;br&gt;</code>   - Titles:     \u00a0\u00a0\u2022 <code>&lt;h1&gt;text&lt;/h1&gt;</code> : means \"very, very important     \u00a0\u00a0\u2022 <code>&lt;h2&gt;text&lt;/h2&gt;</code> : means \"very important     \u00a0\u00a0\u2022 <code>&lt;h3&gt;text&lt;/h3&gt;</code> : means \" important     \u00a0\u00a0\u2022 <code>&lt;h4&gt;text&lt;/h4&gt;</code> : means \" less important     \u00a0\u00a0\u2022 <code>&lt;h5&gt;text&lt;/h5&gt;</code> : ...     \u00a0\u00a0\u2022 <code>&lt;h6&gt;text&lt;/h6&gt;</code> : ...</p> <p> </p> <p>to see more html elements visit this link:more html elements </p> <p> Html: attributes </p> <ul> <li>Attributes contain additional information about the element, but do not appear in the actual content. </li> <li>The class attribute gives the element an identifying name that will be used for it </li> <li>Several elements can belong to the same class.</li> </ul> <p> </p> <p>Html: images </p> <p> </p> <p>There are several attributes that can be defined:  \u00a0\u00a0  - src source image [URI or file name] alt  \u00a0\u00a0  - alt in this attribute, you specify a descriptive text for users who can't see the image (e.g. something went wrong and the image isn't displayed).  \u00a0\u00a0  - height in pixels  \u00a0\u00a0  - width in pixels  \u00a0\u00a0  - align to the left, right, top, middle or bottom </p> <p>Html: Lists and links Lists:  \u00a0\u00a0  - Unordered lists <code>&lt;ul&gt; + &lt;li&gt;</code>  \u00a0\u00a0  - Ordered lists <code>&lt;ol&gt; + &lt;li&gt;</code></p> <p> </p> <p>Links: </p> <p> </p> <p>Html: Tables</p> <p> </p> <p>Html: Header and footer tags</p> <ul> <li> <p><code>&lt;header&gt;</code>: represents introductive content, generally a group of introductive or navigator content. It may contain title elements, but also other elements such as a logo, a search form, the author's name, etc.  </p> </li> <li> <p><code>&lt;footer&gt;</code>: represents the footer of the nearest section or section root. An element usually contains information about the section's author, copyright data or links to other related documents. </p> </li> </ul> <p>Html: \u00ab article \u00bb , \u00ab section \u00bb, \u00ab nav \u00bb and \u00ab div \u00bb tags</p> <ul> <li><code>&lt;article&gt;</code>: represents an autonomous composition in a document, page, application or site, intended for independent distribution or reuse.  Rq: A given document may contain several articles. </li> <li><code>&lt;section&gt;</code>: represents a generic section of a document. Rq: a section generally begins with a title </li> <li><code>&lt;nav&gt;</code>: represents a section of a page with links to other pages or fragments of that page. </li> <li><code>&lt;div&gt;</code>:(or division) is the generic container for stream content. As a \"pure\" container, the element represents nothing in itself. Instead, it's used to group content together so that it can be easily styled using the class or id attributes, to mark a section of a document as being written in a different language (using the lang attribute), and so on. Rq: This tag will be interesting to study when you discover CSS. </li> </ul> <p>Html: Multimedia tags </p> <ul> <li> <p><code>&lt;video&gt;</code> : integrates a video player directly into the page, with Play and Pause buttons and a progress bar, volume control... </p> </li> <li> <p><code>&lt;audio&gt;</code>: same as the video tag, but for audio. Each browser uses its own design to style its player. But it's also possible to create your own design, if you want a uniform look. </p> </li> <li> <p><code>&lt;canvas&gt;</code>:the most exciting tag of all!!! It's a form of surface on which shapes can be traced and animated. It offers revolutionary possibilities for video game development. Coupled with WebGL for 3D graphics rendering, impressive results can be achieved within the browser itself. </p> </li> </ul> <p>Html: Forms </p> <ul> <li><code>&lt;form&gt;</code>: represents a form, i.e. a section of a document containing interactive controls enabling a user to provide information.</li> <li><code>&lt;input&gt;</code>: used to create an interactive control in a web form that allows the user to enter data. The element's input options and behavior are highly dependent on the value specified in its type attribute and its other attributes.  To see more of the tags used in forms, please visit: tags for forms</li> </ul>"},{"location":"Chapter%202/#css-cascading-style-sheet","title":"CSS: Cascading Style Sheet","text":"<p> CSS: Presentation  </p> <ul> <li>Introduced in 1996</li> <li>CSS 1 \u2192 CSS 2.0 \u2192 CSS 2.1 \u2192 CSS 3 </li> <li>A language that complements HTML </li> <li>A langage that manages the layout of your site </li> <li>A langage that allows you to choose colors, selects fonts, defines text size, borders, background, etc. </li> <li>A langage that Allows you to lay out your site; menu layout, width, header position ...</li> </ul> <p></p> <p> CSS: Example  </p> <p> CSS: Syntax  </p> <ul> <li>Selector: the element(s) to be styled </li> <li>Declaration: a single rule specifying the properties of the element you want to style</li> <li>Properties: the ways in which you can style a given html element</li> <li>Property value; choose one of the many possible appearances for a given property</li> </ul> <p></p> <ul> <li>Each rule element must be surrounded by braces { }.</li> <li>In each declaration, use a colon \":\" to separate properties from their values.</li> <li>Use a semicolon \";\" to separate each declaration from the next.</li> </ul> <p>You can also select multiple elements and apply a single set of rules to each of them. Separate multiple selectors with commas. For example:  </p> <p> Some CSS properties  </p>"},{"location":"Chapter%202/#css-3","title":"CSS 3","text":"<ul> <li>All new features since CSS 2.1</li> <li>Enriches the style sheets:             - New effects,             - New selectors,             - New ways to specify colors,             - Detection of the user's device,</li> <li>Calculations in a style sheet...</li> <li>Rounded borders</li> <li>Vendor prefixes</li> <li>Visual effects</li> <li>Selectors</li> </ul> <p> CSS : selector </p> <p>A type selector targets an HTML element (a tag) in your document:</p> <ul> <li> <p>Type selector : you just have to specify the name of the html tag</p> </li> <li> <p>Universal selector ( * ): allows to select all the document</p> </li> <li> <p>Class selector : start with a point (.)</p> <ul> <li> <p>Select any element to which this class is applied</p> </li> <li> <p>Select elements of a given type</p> </li> <li> <p>Select an element belonging to several classes</p> </li> </ul> </li> <li> <p>ID selector: start with (#) used in the same way as a class selector but an ID cannot have a duplicate in the same document</p> </li> <li> <p>Attribute selector: matches elements based on the presence or value of a given attribute.</p> </li> </ul> <p> CSS : Cascade, inheritance and specificity </p> <p>Objectives: Control how CSS is applied to HTML and how conflicts are resolved</p> <p>Why: A CSS that does not apply as wanted to an element!</p> <p>=&gt; Creation of several rules to apply on the same element</p> <p>Solution : Creation of several rules to be applied on the same element voici comment faire une structure html. </p> <p> Cascade </p> <p>Order of appearance of the rules in the CSS </p> <p>=&gt; 2 rules with the same specificity: the last one will be applied</p> <p>Example: Color will have the final value Blue</p> <p></p> <p> Specificity </p> <p>Specificity measures how precise the selection is:</p> <ul> <li> <p>Low specificity selector: targets all elements of a given type: low rating</p> </li> <li> <p>More specific selector: only targets elements with the class attribute of the specified value: high rating</p> </li> </ul> <p></p> <p>Inheritance</p> <p>Some values for a CSS property are passed from parent elements to their children, others are not.</p> <p></p> <p>Warning: Properties such as width, margins, fill, and borders are not inherited.</p> <p>Inheritance: properties</p>      - Inherit : inheritance enabled     - Initial : default value     - unset : reset the property to its natural value <p></p>"},{"location":"Chapter%202/#responsive-design","title":"Responsive Design","text":"<ul> <li>A responsive interface adapts to the size of the screen, while remaining comfortable to use. =&gt; Need to design websites which can be viewed from any terminal, desktop PC or cell phone, with a comparable comfort of use. </li> </ul> <p>Responsive: the key steps</p> <ul> <li>Responsive web design :    1st step : device : take the ring road into account =&gt; viewport.   2d step : mobile first : css for mobile first =&gt; min-width, max-width, min-height, max-height   3rd step : media query : define breakpoint  </li> </ul> <p>Step 1 : Viewport</p> <p>The viewport declaration must be placed in ALL HTML pages of the website, in the head section. </p> <p>Step 2: Define dimensions and set limits</p> <ul> <li>Define dimensions in relative units: For margins, element dimensions, etc. Relative length units specify a length relative to another length property. The most commonly used unit is the percentage. It is relative to the parent element. \u2192 So all dimensions are proportional to those of the screen</li> <li>Set limits: 4 properties allow to set min-width, max-width, min-height and max-height limits  \u2192 Unlike the other dimensions, these values will be defined in absolute units (e.g. pixels)</li> </ul>"},{"location":"Chapter%202/#media-query","title":"Media query","text":"<p>The media queries allow, while remaining on a screentype terminal, to filter styles according to the size of this screen. @media applies CSS rules to a specific device. By using this attribute, it is therefore possible to define specific layouts for each device: screen, printer, smartphone, etc.</p> <p></p>"},{"location":"Chapter%202/#flexbox","title":"Flexbox","text":"<ul> <li> <p>Flexbox, or flexible boxes, is a new property introduced in CSS3. They make adaptive design much easier. </p> </li> <li> <p>With flex-wrap, if the elements are too big to fit on one line, they will move to another line</p> </li> </ul> <p></p> <ul> <li>Flex-flow : shorthand property that specifies the direction of a flex container, as well as its wrapping behavior.</li> </ul> <p></p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;\n&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Chapter%202/#code-with-a-specific-langage","title":"Code with a specific langage","text":"<p><pre><code>import tensorflow as tf\ndef whaterver()\n return 0\n</code></pre> </p>"}]}