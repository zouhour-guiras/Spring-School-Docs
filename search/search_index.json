{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Acceuil/","title":"PC001-Web development","text":""},{"location":"Acceuil/#description","title":"Description","text":"<p>The aim of this course is to teach methods and techniques that enable managers to lead large projects while controlling costs, avoiding delays, and ensuring quality. The students will be taught the key tools for project Management. They will have to apply them to a very concrete project: A Web site Design based on customer requirements.</p>"},{"location":"Acceuil/#course-goals","title":"Course goals","text":"<p>\u2794  Understand the technologies and protocols underlying the Web Discover the evolution of the Web, from its creation to the present day. \u2794 Master HTML5 and CSS3 standards to create and style Web pages. \u2794 Understand the basics of JavaScript: dynamic functionalities on the Web. \u2794 Discover the tools you need to develop a Web application, on both the client and server sides. </p>"},{"location":"Acceuil/#project-requirements","title":"Project requirements","text":"<ul> <li> <p>The students will be organized in 4 groups (including a Project leader, a Technical Manager, a Design manager and a Communication Manager), and will work on 4 different Websites (Museum, School, Travel Agency and Restaurant). </p> </li> <li> <p>Through the course, the students will have to face practical issues putting you at risk or slowing down the process, to enable them to cope with it in their future professional life.</p> </li> <li> <p>They will be assessed both on the quality of the final web site design presentation and the way they handled the critical situation during the project development.</p> </li> </ul>"},{"location":"Acceuil/#course-schedule-from-february-26-to-march-22","title":"Course schedule: From February 26 to March 22","text":""},{"location":"Acceuil/#week-1-from-february-26-to-march-1","title":"Week 1: From February 26 to March 1","text":"<p>Chapter 1: Introduction to the web</p> <ul> <li>History of the web</li> <li>Client-server architecture</li> <li>Static vs dynamic web</li> <li>The difference between front-end and back-end </li> <li>Website editors and frameworks</li> </ul> <p>Chapter 2: Master the basic technologies of client-side Web development</p> <ul> <li>HTML: presentation, DOM, structuring an html page and the notion of tags </li> <li>CSS: presentation, selector types and responsive design</li> <li>JavaScript basics: Basic concepts, functions and arrays, callback Functions</li> <li>Events and DOM manipulation</li> <li>Advanced JavaScript: Objects, JSON and Storage. </li> </ul> <p>Practical work</p> <ul> <li>Check that groups have been created and projects selected correctly</li> <li>Creation of HTML, CSS and JavaScript pages for the project</li> </ul>"},{"location":"Acceuil/#week-2-from-march-4-to-march-8","title":"Week 2: From March 4 to March 8","text":"<p>Chapter 3: Discover a modern web framework: Vue.Js</p> <ul> <li>Introduction to Vue.js</li> <li>Installation</li> <li>Vue instance </li> <li>Directives Vue.js </li> <li>Components </li> <li>Single File Component (SFC) </li> <li>Vue Router </li> </ul> <p>Chapter 4: Introduction to the server side</p> <ul> <li>Web server definition </li> <li>HTTP / HTTPS protocols </li> <li>HTTP request methods (GET, POST) </li> </ul> <p>Chapter 5: Node.js / Express.js</p> <ul> <li>Introduction to Node.js</li> <li>Node.js modules</li> <li>Framework Express.js</li> <li>Routing</li> </ul> <p>Practical work </p> <ul> <li>Creation of a Vue CLI project</li> <li>Translation of project pages (html, css and javascript) into components</li> <li>Configuration of the different routes in index.js file.</li> </ul>"},{"location":"Acceuil/#week-3-from-march-11-to-march-15","title":"Week 3: From March 11 to March 15","text":"<p>Chapter 6: Authentication and database (security, data persistence)</p> <ul> <li>Authentication: user registration, hash with bcrypt</li> <li>Connecting a MySQL database to a Node.js application</li> <li>Executing SQL queries on a MySQL database with NodeJS</li> <li>Using a MySQL database in NodeJS with Sequelize</li> </ul> <p>Practical work </p> <ul> <li>Implement http methods on the project website.</li> <li>Create and configure a database for project website. </li> </ul>"},{"location":"Acceuil/#week-4-from-march-18-to-march-22","title":"Week 4 : From March 18 to March 22","text":"<p>Practical work</p> <ul> <li>Continue working on the project</li> <li>Final presentation: demonstration of the project functionalities</li> </ul>"},{"location":"Acceuil/#suggested-resources","title":"Suggested resources","text":"<ul> <li>Mozilla Developer Network(MDN) :developper mozzilla</li> <li>StackOverflow :stackoverflow </li> </ul>"},{"location":"Chapter%201/","title":"Chapter 1 : An introduction to the web","text":""},{"location":"Chapter%201/#table-of-contents","title":"Table of contents","text":"<ul> <li>History of the web</li> <li>Client-server architecture</li> <li>Static vs dynamic web</li> <li>The difference between front-end and back-end </li> <li>Website editors and frameworks</li> </ul>"},{"location":"Chapter%201/#the-web-what-you-need-to-know","title":"The Web: what you need to know!","text":""},{"location":"Chapter%201/#a-little-bit-of-history","title":"A little bit of history\u2026","text":""},{"location":"Chapter%201/#what-is-the-internet","title":"What is the Internet?","text":"<p>A global computer network consisting of a set of national, regional and private networks (networks of networks), which are linked by the TCP/IP communication protocol and which work together to provide a unique interface to their users.</p> <p>TCP/IP communication protocol: (Transmission Control Protocol/Internet Protocol) Is a set of rules used to enable communication between devices on a computer network. It is widely used as a communications protocol on the Internet, and is also used in many local area networks (LANs) and corporate networks.</p>"},{"location":"Chapter%201/#network-computer-network","title":"Network &amp; Computer network","text":""},{"location":"Chapter%201/#communication-protocol-tcpip-suite","title":"Communication protocol &amp; TCP/IP suite","text":""},{"location":"Chapter%201/#the-key-players-of-the-internet","title":"The key players of the Internet","text":""},{"location":"Chapter%201/#some-examples-of-internet-protocols","title":"Some examples of Internet protocols","text":""},{"location":"Chapter%201/#internet-services","title":"Internet services","text":""},{"location":"Chapter%201/#world-wide-web-www","title":"World Wide Web (WWW)","text":""},{"location":"Chapter%201/#web-evolution","title":"Web evolution","text":""},{"location":"Chapter%201/#how-does-the-web-work","title":"How does the Web work?","text":""},{"location":"Chapter%201/#web-servers","title":"Web servers","text":"<p>\u2794 A program can be both server and client of other servers. \u2794 retrieving a web page that contains information from a database </p> <p></p>"},{"location":"Chapter%201/#client-server","title":"Client / Server","text":"<p>\u2022 The DNS (Domain Name System) protocol allow to match an IP address with a name in order to avoid to retain IP addresses. Exemple : 195.83.142.250 \u2794</p> <p></p> <p>\u2022 The FQDN allows access to a machine on which a number of resources are available and which are served by different protocols. \u2022 A URL (Uniform Resource Location) allows to specify which resources to reach, and with which protocol.</p> <p></p>"},{"location":"Chapter%201/#static-vs-dynamic-web","title":"Static vs dynamic web","text":""},{"location":"Chapter%201/#a-static-web-page","title":"A static WEB page","text":"<p>\u2022 Visible as designed \u2022 Can present different forms of content: images, flash animations, video, music, etc. \u2022 Its content does not change =&gt; Static  \u2022 Stored in the Web server which only displays it when requested  \u2022 The entire code that composes it is interpreted directly by the client (Web browser) </p> <p></p>"},{"location":"Chapter%201/#composition-of-a-web-page","title":"Composition of a web page","text":""},{"location":"Chapter%201/#example-of-a-web-page-managing-a-cv-library","title":"Example of a web page managing a CV-library","text":"<p>\u2022  File://  : local protocol               - Files must be accessible on the machine used to view them               - Files are not served by a web server  \u2022  http:// : client-server protocol               - Files are retrieved from the web server machine to the client machine (web browser)               - Files are served by a server usually on another machine </p> <p> Rq  :(firefox et chrome) :[ctrl]+[maj]+i  gives access to a tool panel allowing to visualize the network exchanges</p> <p></p>"},{"location":"Chapter%201/#static-web-advantages-and-disadvantages","title":"Static Web: advantages and disadvantages","text":""},{"location":"Chapter%201/#a-dynamic-web-page","title":"A dynamic web page","text":""},{"location":"Chapter%201/#dynamic-web-site-advantages","title":"Dynamic Web site: advantages","text":""},{"location":"Chapter%201/#dynamic-web-site-disadvantages","title":"Dynamic Web site: disadvantages","text":""},{"location":"Chapter%201/#the-difference-between-front-end-and-back-end","title":"The difference between front-end and back-end","text":""},{"location":"Chapter%201/#the-back-end-its-competences","title":"The Back-end: its competences","text":"<p>The Back-End is divided into three essential parts:  Server (or web hosting): seen as a hard disk accessible 24 hours a day, on which the pages of the website are stored. Databases: comparable to a large table with columns containing the necessary information on which the development is based, for example \"name\", \"first name\", \"password\", \"current purchase\". Dynamic programming languages: allow to keep, process, modify data and provide updated information on a website (such as news, product sheets, images, videos, etc.). The most used languages are PHP, Ruby, Python, SQL  Frameworks: to make the code clearer, easier to modify and simpler to maintain as a team, for example: CakePHP, Symphony</p>"},{"location":"Chapter%201/#website-editors-and-frameworks","title":"Website editors and frameworks","text":""},{"location":"Chapter%201/#website-editors","title":"Website editors","text":""},{"location":"Chapter%201/#some-examples","title":"Some examples","text":""},{"location":"Chapter%201/#frameworks","title":"Frameworks","text":""},{"location":"Chapter%201/#content-management-system-cms","title":"Content Management System (CMS)","text":""},{"location":"Chapter%201/#content-management-system-some-examples","title":"Content Management System (Some examples)","text":""},{"location":"Chapter%201/#content-management-system-useful-links","title":"Content Management System (Useful links)","text":""},{"location":"Chapter%202/","title":"Chapter 2 : Master the basic technologies of client-side Web development","text":""},{"location":"Chapter%202/#table-of-contents","title":"Table of contents","text":"<ul> <li>HTML: presentation, DOM, structuring an html page and the notion of tags </li> <li>CSS: presentation, selector types and responsive design</li> <li>JavaScript basics: Basic concepts, functions and arrays, callback Functions, - events and DOM manipulation</li> <li>Advanced JavaScript: Objects, JSON and Storage. </li> </ul>"},{"location":"Chapter%202/#introduction","title":"Introduction","text":""},{"location":"Chapter%202/#web-page-languages-frontend","title":"Web page languages Frontend","text":""},{"location":"Chapter%202/#why-learn-these-languages","title":"Why learn these languages?","text":""},{"location":"Chapter%202/#the-w3c-world-wide-web-consortium","title":"The W3C ! (World Wide Web Consortium)","text":"<p>Check your code : https://validator.w3.org/</p>"},{"location":"Chapter%202/#html-hypertext-markup-language","title":"HTML : HyperText Markup Language","text":"<p> HTML : its versions</p> <p></p> <p> HTML : the basics </p> <p></p> <p> HTML : the Doctype </p> <p> <code>&lt;!DOCTYPE html&gt;</code>  \u2022 A Doctype is a line of code used to indicate the type of your document. \u2022 It specifies the defined standards that you will use in this document. \u2022 The line of code containing the Doctype is inserted at the very beginning of the page. You can place it on the first line of your HTML document if you wish.  \u2022 The Doctype should always be before the <code>&lt;HTML&gt;</code> tag. \u2022 For a developer, the Doctype is used to validate his pages according to the chosen W3C standards.  \u2022 Its main purpose is to tell browsers how to interpret the document or web page. \u2022 With the arrival of HTML 5, the doctype was thus simplified to the maximum: </p> <p> Create your first web page  To create a web page, all you need to do is:  - Use your favorite text editor (Visual studio code, Sublime Text or other).  - Create a file with the \".html\" extension and save it  - Open the file you've created by double-clicking on the file icon, which by default will be your browser's icon. </p> <p>A web page is made up of two parts:</p> <ul> <li>The <code>&lt;head&gt;</code> header: general information about the page: its title, encoding (for handling special characters), etc.</li> </ul> <p>This information is not displayed on the page \u2794 information intended for the computer</p> <ul> <li>The body <code>&lt;body&gt;</code>: this is where the main part of the page is located; anything written here will be displayed on the screen.</li> </ul> <p> </p> <p>To execute the html page, you need to run the file: </p> <p> </p> <p> Html: Basics </p> <ul> <li>Any open tag must be closed: <code>&lt;tag&gt; ... &lt;/tag&gt;</code>     \u2022 Example: <code>&lt;html&gt; ... &lt;/html&gt;</code></li> <li>Empty tags can be self-closing:      \u2022 Example : <code>&lt;br/&gt;</code></li> <li>Nesting possible but no overlap:      \u2022 Example : <code>&lt;tag 1&gt;&lt;tag 2&gt;&lt;/tag 1&gt;&lt;/tag 2&gt;</code>\u2794 <code>&lt;tag 1&gt; &lt;tag 2&gt; &lt;/tag 2&gt; &lt;/tag 1&gt;</code> </li> <li>DOCTYPE is case-sensitive </li> <li>Attributes always have a value, and the value is always enclosed in single or double quotation marks. </li> <li>Attributes are separated from their value by \"=\". </li> <li>Attributes are separated from each other by at least one blank character (space, line feed, tab). </li> </ul> Note: In HTML 5, attributes are not case-sensitive, but this is not the case in XML dialects: attributes must always be written in lower case. <p> Examples of tags   - The paragraphs: <code>&lt;p&gt; paragraph &lt;/p&gt;</code>   - Go to line: <code>&lt;br&gt;</code>   - Titles:     \u00a0\u00a0\u2022 <code>&lt;h1&gt;text&lt;/h1&gt;</code> : means \"very, very important     \u00a0\u00a0\u2022 <code>&lt;h2&gt;text&lt;/h2&gt;</code> : means \"very important     \u00a0\u00a0\u2022 <code>&lt;h3&gt;text&lt;/h3&gt;</code> : means \" important     \u00a0\u00a0\u2022 <code>&lt;h4&gt;text&lt;/h4&gt;</code> : means \" less important     \u00a0\u00a0\u2022 <code>&lt;h5&gt;text&lt;/h5&gt;</code> : ...     \u00a0\u00a0\u2022 <code>&lt;h6&gt;text&lt;/h6&gt;</code> : ...</p> <p> </p> <p>to see more html elements visit this link:more html elements </p> <p> Html: attributes </p> <ul> <li>Attributes contain additional information about the element, but do not appear in the actual content. </li> <li>The class attribute gives the element an identifying name that will be used for it </li> <li>Several elements can belong to the same class.</li> </ul> <p> </p> <p>Html: images </p> <p> </p> <p>There are several attributes that can be defined:  \u00a0\u00a0  - src source image [URI or file name]  \u00a0\u00a0  - alt in this attribute, you specify a descriptive text for users who can't see the image (e.g. something went wrong and the image isn't displayed).  \u00a0\u00a0  - height in pixels  \u00a0\u00a0  - width in pixels  \u00a0\u00a0  - align to the left, right, top, middle or bottom </p> <p>Html: Lists and links Lists:  \u00a0\u00a0  - Unordered lists <code>&lt;ul&gt; + &lt;li&gt;</code>  \u00a0\u00a0  - Ordered lists <code>&lt;ol&gt; + &lt;li&gt;</code></p> <p> </p> <p>Links: </p> <p> </p> <p>Html: Tables</p> <p> </p> <p>Html: Header and footer tags</p> <ul> <li> <p><code>&lt;header&gt;</code>: represents introductive content, generally a group of introductive or navigator content. It may contain title elements, but also other elements such as a logo, a search form, the author's name, etc.  </p> </li> <li> <p><code>&lt;footer&gt;</code>: represents the footer of the nearest section or section root. An element usually contains information about the section's author, copyright data or links to other related documents. </p> </li> </ul> <p>Html: \u00ab article \u00bb , \u00ab section \u00bb, \u00ab nav \u00bb and \u00ab div \u00bb tags</p> <ul> <li><code>&lt;article&gt;</code>: represents an autonomous composition in a document, page, application or site, intended for independent distribution or reuse.  Rq: A given document may contain several articles. </li> <li><code>&lt;section&gt;</code>: represents a generic section of a document. Rq: a section generally begins with a title </li> <li><code>&lt;nav&gt;</code>: represents a section of a page with links to other pages or fragments of that page. </li> <li><code>&lt;div&gt;</code>:(or division) is the generic container for stream content. As a \"pure\" container, the element represents nothing in itself. Instead, it's used to group content together so that it can be easily styled using the class or id attributes, to mark a section of a document as being written in a different language (using the lang attribute), and so on. Rq: This tag will be interesting to study when you discover CSS. </li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Page Title name&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;header&gt;\n      &lt;h1&gt; Main title&lt;h1&gt;\n      &lt;img src=\"Logo_efrei.png\" alt=\"logo efrei\" with=\"50\" height=\"50\"&gt;\n    &lt;/header&gt;\n    &lt;nav&gt;\n      &lt;ul&gt;\n        &lt;li&gt;&lt;a href=\"#home\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"#About\"&gt;About us&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"#Contact\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;article&gt;\n         &lt;div class=\"css_class_section1_section2\"&gt;\n          &lt;section&gt;\n            &lt;h2&gt;section1&lt;/h2&gt;\n            &lt;p&gt;paragraph in section one&lt;/p&gt;\n          &lt;/section&gt;\n          &lt;section&gt;\n            &lt;h2&gt;section1&lt;/h2&gt;\n            &lt;p&gt;paragraph in section one&lt;/p&gt;\n          &lt;/section&gt;\n        &lt;/div&gt;\n      &lt;/article&gt;\n      &lt;footer&gt;\n        &lt;p&gt;@ 2024 spring school&lt;/p&gt;\n      &lt;/footer&gt;\n    &lt;/nav&gt;\n  &lt;/body&gt;\n&lt;html&gt;\n</code></pre> <p>Html: Multimedia tags </p> <ul> <li> <p><code>&lt;video&gt;</code> : integrates a video player directly into the page, with Play and Pause buttons and a progress bar, volume control... </p> </li> <li> <p><code>&lt;audio&gt;</code>: same as the video tag, but for audio. Each browser uses its own design to style its player. But it's also possible to create your own design, if you want a uniform look. </p> </li> <li> <p><code>&lt;canvas&gt;</code>:the most exciting tag of all!!! It's a form of surface on which shapes can be traced and animated. It offers revolutionary possibilities for video game development. Coupled with WebGL for 3D graphics rendering, impressive results can be achieved within the browser itself. </p> </li> </ul> <p>Html: Forms </p> <ul> <li><code>&lt;form&gt;</code>: represents a form, i.e. a section of a document containing interactive controls enabling a user to provide information.</li> <li><code>&lt;input&gt;</code>: used to create an interactive control in a web form that allows the user to enter data. The element's input options and behavior are highly dependent on the value specified in its type attribute and its other attributes.  To see more of the tags used in forms, please visit: tags for forms</li> </ul>"},{"location":"Chapter%202/#css-cascading-style-sheet","title":"CSS: Cascading Style Sheet","text":"<p> CSS: Presentation  </p> <ul> <li>Introduced in 1996</li> <li>CSS 1 \u2192 CSS 2.0 \u2192 CSS 2.1 \u2192 CSS 3 </li> <li>A language that complements HTML </li> <li>A langage that manages the layout of your site </li> <li>A langage that allows you to choose colors, selects fonts, defines text size, borders, background, etc. </li> <li>A langage that Allows you to lay out your site; menu layout, width, header position ...</li> </ul> <p></p> <p> CSS: Example  </p> <p> CSS: Syntax  </p> <ul> <li>Selector: the element(s) to be styled </li> <li>Declaration: a single rule specifying the properties of the element you want to style</li> <li>Properties: the ways in which you can style a given html element</li> <li>Property value; choose one of the many possible appearances for a given property</li> </ul> <p></p> <ul> <li>Each rule element must be surrounded by braces { }.</li> <li>In each declaration, use a colon \":\" to separate properties from their values.</li> <li>Use a semicolon \";\" to separate each declaration from the next.</li> </ul> <p>You can also select multiple elements and apply a single set of rules to each of them. Separate multiple selectors with commas. For example:  </p> <p> Some CSS properties  </p>"},{"location":"Chapter%202/#css-3","title":"CSS 3","text":"<ul> <li>All new features since CSS 2.1</li> <li>Enriches the style sheets:             - New effects,             - New selectors,             - New ways to specify colors,             - Detection of the user's device,</li> <li>Calculations in a style sheet...</li> <li>Rounded borders</li> <li>Vendor prefixes</li> <li>Visual effects</li> <li>Selectors</li> </ul> <p> CSS : selector </p> <p>A type selector targets an HTML element (a tag) in your document:</p> <ul> <li> <p>Type selector : you just have to specify the name of the html tag</p> </li> <li> <p>Universal selector ( * ): allows to select all the document</p> </li> <li> <p>Class selector : start with a point (.)</p> <ul> <li> <p>Select any element to which this class is applied</p> </li> <li> <p>Select elements of a given type</p> </li> <li> <p>Select an element belonging to several classes</p> </li> </ul> </li> <li> <p>ID selector: start with (#) used in the same way as a class selector but an ID cannot have a duplicate in the same document</p> </li> <li> <p>Attribute selector: matches elements based on the presence or value of a given attribute.</p> </li> </ul> <p> CSS : Cascade, inheritance and specificity </p> <p>Objectives: Control how CSS is applied to HTML and how conflicts are resolved</p> <p>Why: A CSS that does not apply as wanted to an element!</p> <p>\u2192 Creation of several rules to apply on the same element</p> <p>Solution : Creation of several rules to be applied on the same element voici comment faire une structure html. </p> <p> Cascade </p> <p>Order of appearance of the rules in the CSS </p> <p>\u2192 2 rules with the same specificity: the last one will be applied</p> <p>Example: Color will have the final value Blue</p> <p></p> <p> Specificity </p> <p>Specificity measures how precise the selection is:</p> <ul> <li> <p>Low specificity selector: targets all elements of a given type: low rating</p> </li> <li> <p>More specific selector: only targets elements with the class attribute of the specified value: high rating</p> </li> </ul> <p></p> <p>Inheritance</p> <p>Some values for a CSS property are passed from parent elements to their children, others are not.</p> <p></p> <p>Warning: Properties such as width, margins, fill, and borders are not inherited.</p> <p>Inheritance: properties</p>      - Inherit : inheritance enabled     - Initial : default value     - unset : reset the property to its natural value <p></p>"},{"location":"Chapter%202/#responsive-design","title":"Responsive Design","text":"<ul> <li>A responsive interface adapts to the size of the screen, while remaining comfortable to use. =&gt; Need to design websites which can be viewed from any terminal, desktop PC or cell phone, with a comparable comfort of use.</li> </ul> <p>Responsive: the key steps</p> <ul> <li>Responsive web design :    1st step : device : take the ring road into account =&gt; viewport.   2d step : mobile first : css for mobile first =&gt; min-width, max-width, min-height, max-height   3rd step : media query : define breakpoint  </li> </ul> <p>Step 1 : Viewport</p> <p>The viewport declaration must be placed in ALL HTML pages of the website, in the head section. </p> <p>Step 2: Define dimensions and set limits</p> <ul> <li>Define dimensions in relative units: For margins, element dimensions, etc. Relative length units specify a length relative to another length property. The most commonly used unit is the percentage. It is relative to the parent element. \u2192 So all dimensions are proportional to those of the screen</li> <li>Set limits: 4 properties allow to set min-width, max-width, min-height and max-height limits  \u2192 Unlike the other dimensions, these values will be defined in absolute units (e.g. pixels)</li> </ul>"},{"location":"Chapter%202/#media-query","title":"Media query","text":"<p>The media queries allow, while remaining on a screentype terminal, to filter styles according to the size of this screen. @media applies CSS rules to a specific device. By using this attribute, it is therefore possible to define specific layouts for each device: screen, printer, smartphone, etc.</p> <p></p>"},{"location":"Chapter%202/#flexbox","title":"Flexbox","text":"<ul> <li> <p>Flexbox, or flexible boxes, is a new property introduced in CSS3. They make adaptive design much easier. </p> </li> <li> <p>With flex-wrap, if the elements are too big to fit on one line, they will move to another line</p> </li> </ul> <p></p> <ul> <li>Flex-flow : shorthand property that specifies the direction of a flex container, as well as its wrapping behavior.</li> </ul> <p></p>"},{"location":"Chapter%202/#javascript-basics","title":"Javascript Basics","text":"- Html : creating content   - Css : organizing content   - Javascript : to interact with the user  <p>Javascript : what is it? </p> <ul> <li> <p>Abbreviated as \"JS\", it is a lightweight scripting language, mainly known as the scripting language for web pages.</p> </li> <li> <p>It is a dynamic language;</p> </li> <li> <p>The code is mainly interpreted by the client browser (interpretation depending on the browser type and version).</p> </li> <li> <p>Event-driven language (association of actions to events triggered by the user (mouseover, click, keyboard input, etc.).</p> </li> <li> <p>Also used in many non-browser environments such as Node.js, Apache CouchDB and even Adobe Acrobat.</p> </li> </ul> <p> Javascript at the beginning! </p> <p>The term JavaScript has remained in the common vocabulary, but in fact it is ECMAScript</p> <ul> <li> <p>Invented in 1995 by Brendan Eich for Netscape and its browser,</p> </li> <li> <p>ECMAScript specification validated by Ecma International in June 1997 ECMA 262 standard</p> </li> <li> <p>ECMAScript standardized in its version 5 in December 2009</p> </li> <li> <p>ES 2015 was released in June 2015. This version was successively called ECMAScript Harmony, ECMAScript 6 and ECMAScript 2015</p> </li> </ul> <p> Advantages and disadvantages </p> <p></p> <p> Where to put the Javascript? </p> <p>3 options :</p> <ol> <li>In the opening tag of an HTML element: </li> <li>In a script element, within an HTML page:  </li> <li>In a separate file containing only JavaScript and with the extension .js:  Javascript : syntax </li> <li>JavaScript is case sensitive.</li> <li>In JavaScript, statements are separated by semicolons.</li> <li>If there are multiple statements on a single line, then they must be separated by a semicolon.</li> <li>Comments:  Javascript : Declaration and initialization of variables</li> </ol> <p>To declare a variable in JavaScript, two options: - The \u00ab var \u00bb keyword : declare a variable and possibly initialize its value  - The \u00ab let \u00bb keyword : allows you to declare variables that are limited to the scope of a block statement, or expression on which it is used, unlike the var keyword, which declares a variable globally, or locally to an entire function regardless of block scope. one of these keywords must be followed by the name we want to give to our variable. It is also possible to define a constant using the keyword \u00ab const \u00bb </p> <p>Notes : 1. A variable declared using the var or let statement without a defined initial value will be worth undefined  2. Variable names are called identifiers 3. A JavaScript identifier must begin with a letter, an underscore <code>(_)</code>, or a dollar sign <code>($)</code> let vs var </p> <p>Javascript: operators, concatenation</p> <ul> <li> <p>Operators:  <code>+, -, /, *, %, == (values), === (values and types), !=(value), !==(values or types), &lt;, &gt;,</code> etc  </p> </li> <li> <p>Concatenation:  </p> </li> <li> <p>Display:  </p> </li> </ul> <p>Javascript: Conditional structure</p> <ul> <li>Simple conditional structures:</li> </ul> <pre><code>  var x=1;\n   if(x&gt;1)\n   {alert('The value of x is greater than 1');\n   }else{\n    alert('The value of x is less than 1')\n   }\n</code></pre> <ul> <li>Multiple conditional structure: </li> </ul> <p><pre><code>var =1 \nif(x&gt;1)\n   {alert('The value of x is greater than 1');\n   }else if(x==1){\n    alert('The value of x is equal to 1')\n   }else{\n    alert('The value of x is less than 1')\n   }\n\nswitch(x){\n    case 0: alert('The value of x is greater than 1');\n    break;\n    case 1: alert('The value of x is equal to 1');\n    break;\n    case 2:alert('The value of x is less than 1');\n    break;\n    default: alert('I dont know!');\n}\n</code></pre> Javascript: Loop structure</p> <p><pre><code>//while loop\nvar x=0;\nwhile(x&lt;10){\n    x++;\n}\n\n//do while loop\ndo{\n    x++;\n}while(x&lt;10);\n\n//For loop\nfor(let i=0;i&lt;10;i++)\n{\n    x++;\n}\n</code></pre> Javascript:function</p> <ul> <li>You can create a function using the obvious keyword \"function\" </li> </ul> <p><pre><code>function random_integer(){\n    return Math.random()*100;\n}\n\nfunction Multiplication(number1,number2)\n{\n    return numbre1+ '*' +numbre2+ '=' + (numbre1+number2);\n}\n</code></pre> - A function can be anonymous(not have a corresponding name): </p> <pre><code>var carr\u00e9=function(n){\n    return n*n;\n}\n\nvar x=carr\u00e9(4);\n</code></pre> <ul> <li>Notes: The declaration of a function can be made after the call</li> </ul> <p>Javascript:events</p> <ul> <li>JavaScript = reactive language \u2192 like a sequence of events that occur in time</li> <li>User interaction is managed through events</li> <li>Event = action or event that occurs in the system and that the system informs you about in order to respond to</li> <li>Events are usually HTML attribute names, the content of these attributes will be JavaScript.</li> <li>In general, JavaScript makes it possible to link a JavaScript instruction with each event: either via the call to a basic JavaScript function, or via the call to one of our own procedures.</li> </ul> <p>Javascript:event detection</p> <p></p> <p>Javascript : functions used with a user action</p> <p>Some examples :  - alert : opens a window with a given message, - modifier window.location to go to another page, - document.write: writes a given text, - setTimeout et setInterval allow respectively to delay and to repeat an instruction; - focus : allows to activate an element of the page (like the box to be filled in a form), blur to deactivate it.</p> <p><pre><code>//trigger immediate alert (alert)\n&lt;button onclikc=\"alert('Hi!')\"&gt;click here!&lt;/button&gt;\n\n//alert triggered in half a second(setTimeout)\n&lt;button onclick=\"setTimeout('alert(\\'Surprise!\\')',500)\"&gt;click here!&lt;/button&gt;\n\n//repeat every 5 seconds (setInterval)\nvar clock_id=setInterval('alert(\\'hi hi !\\');',5000);\n\nclearInterval(clock_id);//end of repeat\n</code></pre> DOM : Document Object Model</p> <ul> <li>The DOM represents HTML as a structure of tree structure of tags.</li> </ul> <p></p> <ul> <li>DOM: structured representation of the document in the form of a tree.</li> <li>DOM: defines how the structure can be manipulated.</li> <li>JavaScript interacts with the page via the DOM structure accessible via a variable called \"document\".</li> <li>DOM: accessing one or more elements</li> <li>To access an element by its \" id \", use \" GetElementById \".</li> <li>If an HTML element has an \"id\", a variable is created for it.</li> </ul> <p>DOM : Access to the element</p> <p>To access a DOM element, you can use: - By its id attribute - By its class attribute - By its tag - By a CSS selector - By its name attribute</p> <p></p>"},{"location":"Chapter%202/#javascript-synchronous-vs-asynchronous","title":"Javascript: Synchronous Vs Asynchronous","text":"<p>Asynchronous in Javascript</p> <ul> <li>In computer science, two operations are said to be synchronous when the second one waits for the first one to finish its work before starting (dependency)</li> <li>Two operations are said to be asynchronous in computer science when they are independent, i.e. when the second operation does not need to wait for the first to finish before starting.</li> <li>In JavaScript, each line of code is executed synchronously, but it is possible to request to execute code asynchronously i.e. actions can be executed independently of the main execution flow </li> <li>In JavaScript, asynchronous operations are put in queues that will execute after the main thread has finished its operations. They do not block the execution of the rest of the JavaScript code </li> <li> <p>Example of asynchronous functions setTimeout setInterval setImmediate </p> </li> <li> <p>The function setTimeout: this is the most common function when you want to execute asynchronous code without blocking the current execution thread.  \u2192 This function takes 2 parameters:</p> </li> <li>The function to be executed asynchronously (which will be added to the event loop queue) ;</li> <li>The time delay, in milliseconds, before executing this function.</li> </ul> <p><pre><code>setTimeout(function(){\n    console.log(\"I'm here!\")\n},5000);\nconsole.log(\"Where are you?\");\n//The message \"where are you?\"\" will display before \"I'm here!\",which will only be displayed after 5 seconds\n</code></pre> Callback function</p> <ul> <li>A \"callback\" function is a function passed as an argument to an asynchronous function and which will be called at the end of the execution of the latter.</li> </ul> <p><pre><code>//function \nfunction greet(name, callback)\n{\n    console.log('Hi'+ ' '+ name);\n    callback();\n}\n//callback function\nfunction callMe(){\n    console.log('I am callback function');\n}\n\n//passing function as an argument\ngreet('Efrei', callMe);\n</code></pre> \u2192 When we pass a function as a parameter, we just give its name, without the parentheses (the presence of parentheses causes a function call) </p>  Rq: This can turn into a callback hell if you have several callbacks where each one requires the result of the previous operation <p>The Promise object</p> <ul> <li>The \"Promise\" object which represents the completion or failure of an asynchronous operation. \u27a2 A promise is an object that is returned and to which callbacks are attached, rather than passing callbacks to a function. \u27a2 A promise in JavaScript is an object that represents the state of an asynchronous operation \u27a2 An asynchronous operation can be in one of the following states :        \u2022 Operation in progress (not completed)       \u2022 Operation successfully completed (promise resolved)       \u2022 Operation completed or more precisely stopped after a failure (promise rejected)</li> </ul> <p><pre><code>const promesse=new Promise((resolde,reject))=&gt;{\n    //asynchrone task to realise\n    //call resolve function if the promise is resolved\n    //or\n    //call reject function if the promise is rejected\n}\n</code></pre> The Anonymous function and arrow function</p> <ul> <li>An arrowed function allows to have a shorter syntax</li> <li>It is possible to define a function directly inside another function</li> </ul> <p></p> <p>Fetch function </p> <p>In JavaScript, the <code>fetch()</code> function is used to make HTTP requests to resources, usually web APIs, and retrieve the data. It is Promise-based, meaning that it can process results asynchronously, using the <code>.then()</code> and  <code>.catch()</code> methods.</p> <pre><code>fetch('https://api.example.com/data')\n  .then(response =&gt; {\n    if (!response.ok) {\n      throw new Error('Erreur HTTP, statut ' + response.status);\n    }\n    return response.json();\n  })\n  .then(data =&gt; {\n    console.log('DATA getted with success :', data);\n    // Do something with data here\n  })\n  .catch(error =&gt; {\n    console.error('an error has occurred :', error);\n  })\n</code></pre> <p>The scope</p> <ul> <li>Scope is often referred to when talking about global and local variables</li> </ul> <p><pre><code>function mafonction(){\n    const terme='secret';\n    return 'Hello everybody';\n}\nconsole.log(mafonction());\nconsole.log(terme);\n</code></pre> - The variable myfunction of type function has a global scope to the script  - The term variable is defined in the secret function and is therefore not accessible outside the scope of the function - Conversely, what is defined outside a function is accessible inside a function</p>"},{"location":"Chapter%202/#objects-in-javascript","title":"Objects in JavaScript","text":"<ul> <li> <p>Objects in JavaScript :   \u27a2 Javascript uses the \"objects\" paradigm    \u27a2 A Javascript object is an entity in itself that has properties and a type    \u27a2 The JavaScript environment provides native (predefined) objects (Date, String, Math, etc...), but it is possible to build new objects    \u27a2 An object is defined with 3 elements :</p> <ul> <li>its constructor,</li> <li>its properties </li> <li>its methods (functions specific to the object) </li> </ul> </li> <li> <p>To see more about object creation, please visit this link : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object</p> </li> <li> <p>Example 1 : creation of an object called \"Person\" </p> </li> </ul> <pre><code>// Definition of the object person\nlet Person = {\n  name: \"Zouhour\",\n  surname: \"Guiras\",\n  age: 33,\n\n  // method to display person information\n  DisplayDetails: function() {\n    console.log(\"name:\", this.name);\n    console.log(\"Surname:\", this.surname);\n    console.log(\"Age:\", this.age);\n  },\n\n  // Method to change the name\n  changeName: function(newName) {\n    this.name = newName;\n  }\n};\n// Display initial person information\nconsole.log(\"Display initial person information\");\nPerson.DisplayDetails();\n\n// Change person name\nPerson.changeName(\"Jane\");\n\n// Display new person information\nconsole.log(\"\\n updated person information\");\nPersonne.DisplayDetails();\n</code></pre> <ul> <li>Example 2: Manage a date object </li> </ul> <pre><code>// Create an object date which presents the current date. \nlet currentDate = new Date();\n\n// display current date\nconsole.log(\"Current Date :\", currentDate);\n\n// get the year\nlet year = currentDate.getFullYear();\nconsole.log(\"current year :\", year);\n\n// get month (0-11)\nlet month = currentDate.getMonth();\nconsole.log(\"Current month:\", month);\n\n// get day of the month (1-31)\nlet day = currentDate.getDate();\nconsole.log(\"Current day of the month :\", day);\n\n// get day of the week (0-6)\nlet dayweek = day.getDay();\nconsole.log(\"Current day of the week :\", day week);\n\n// get hour\nlet hour = currentDate.getHours();\nconsole.log(\"Current hour :\", hour);\n\n// get minutes\nlet minutes = currentDate.getMinutes();\nconsole.log(\"Current minutes:\", minutes);\n\n// get seconds\nlet seconds = currentDate.getSeconds();\nconsole.log(\"Current Seconds :\", seconds);\n\n// get milliseconds\nlet milliseconds = currentDate.getMilliseconds();\nconsole.log(\"Current millisecondes :\", milliseconds);\n</code></pre>"},{"location":"Chapter%202/#the-iterable-object-array","title":"The iterable object : Array","text":"<ul> <li>Object used to create arrays</li> <li>Array objects have methods to browse and modify their contents</li> <li>To see the list of methods that can be used to manipulate arrays, please visit this link : https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Array </li> </ul> <pre><code>let students=['Jean','Paul','David'];\nconsole.log(students.length);\n// it will display 3\n// The access to an element of the array is done via its index \nlet first=students[0];\n//Jean\nlet second=students[2];\n//David\n//Loop on the content of the table\nstudents.forEach(function(item, index, array)\n{\n    console.log(item,index);\n\n});\n// Jean 0\n// Paul 1\n// David 2\n\n//Add to end, remove from start/end an element \nlet new=students.push('Zouhour');\nlet last=students.pop();\nlet first=students.shift();\n</code></pre>"},{"location":"Chapter%202/#the-json-format","title":"The JSON format","text":"<ul> <li>JSON : JavaScript Object Notation</li> <li>Standard format used for representing structured data in a way similar to JavaScript objects</li> <li>Developed by Douglas Crockford</li> <li>Can be used in many other programming languages</li> <li>JSON: string that is converted into a native Javascript object (parsing)</li> <li>JS provides a global JSON object with methods to perform the conversion</li> <li>A JSON object can be stored in a file with the extension .json and the MIME Type application/ json</li> <li> <p>Allows to prioritize data</p> </li> <li> <p>Example: </p> </li> </ul> <p><pre><code>{\n  \"students\": [\n    {\n      \"name\": \"Dupont\",\n      \"surname\": \"Jean\",\n      \"age\": 20\n    },\n    {\n      \"name\": \"Martin\",\n      \"surname\": \"Marie\",\n      \"age\": 22\n    },\n    {\n      \"name\": \"Dubois\",\n      \"surname\": \"Pierre\",\n      \"age\": 21\n    }\n  ]\n}\n</code></pre> The JSON object</p> <ul> <li>Object global javascript</li> <li>Contains methods for :<ul> <li>interpreting JSON</li> <li>converting values to JSON</li> </ul> </li> </ul> <p>\u2192 Parse: parse the string as JSON   \u2022 If needed, transform the produced value and its properties and return the value </p> <p>\u2192 stringify: Returns a JSON string corresponding to the specified value    \u2022 Includes some properties    \u2022 Replaces property values in a way defined by the user. </p> <ul> <li>Example: Suppose you have a JSON file called students.json containing the data shown above: </li> <li>To convert the content of the JSON file into a JavaScript object, use the method <code>JSON.parse()</code></li> </ul> <pre><code>  const fs = require('fs');\n  // Read the content of the JSON file\n  let jsonData = fs.readFileSync('students.json', 'utf-8');\n  // Convert the content of json file to an object js\n  let dataObj = JSON.parse(jsonData);\n  // display the different students\n  console.log(dataObj); \n</code></pre> <ul> <li>To convert a JavaScript object into a JSON string, use the method : <code>JSON.stringify()</code></li> </ul> <pre><code>const fs = require('fs');\n\n// Objet JavaScript represents students\nlet students = [\n  {\n    name: \"Smith\",\n    surname: \"John\",\n    age: 23\n  },\n  {\n    name: \"Johnson\",\n    surname: \"Emily\",\n    age: 21\n  }\n];\n\n// Convertir the objet JavaScript to a string JSON\nlet jsonData = JSON.stringify({ students: students }, null, 2);\n\n// write the string json into a file\nfs.writeFileSync('new_students.json', jsonData, 'utf-8');\n</code></pre>"},{"location":"Chapter%202/#storage","title":"Storage","text":"<ul> <li>In JavaScript, \"storage\" refers to the ability to store data locally in the Web browser. There are two main types of storage: localStorage and sessionStorage.</li> <li>localStorage: localStorage enables data to be stored persistently in the browser. This means that stored data remains available even after the browser has been closed and reopened. Data stored in localStorage remains until explicitly deleted by the user or erased by the script.</li> <li> <p>sessionStorage: Unlike localStorage, sessionStorage stores data for the duration of a browser session. This means that data stored in sessionStorage is available as long as the browser window or tab remains open. Once the session ends (i.e. when the user closes the tab or browser), the data stored in the sessionStorage is deleted.</p> </li> <li> <p>Example with localStorage:  <pre><code>// store data in localStorage\nlocalStorage.setItem('name', 'John');\nlocalStorage.setItem('age', '30');\n\n// Get data from localStorage\nconst nom = localStorage.getItem('name');\nconst age = localStorage.getItem('age');\n\nconsole.log(name); // display : John\nconsole.log(age); // display : 30\n\n// delete data from localStorage\nlocalStorage.removeItem('age');\n\n// delete all data from localStorage\nlocalStorage.clear();\n</code></pre></p> </li> <li>Example with sessionStorage: </li> </ul> <pre><code>// store data in sessionStorage\nsessionStorage.setItem('name', 'Alice');\nsessionStorage.setItem('city', 'Paris');\n\n// get data from sessionStorage\nconst nom = sessionStorage.getItem('name');\nconst ville = sessionStorage.getItem('city');\n\nconsole.log(name); // display : Alice\nconsole.log(city); // display : Paris\n\n// delete data from sessionStorage\nsessionStorage.removeItem('city');\n\n// delete all data from sessionStorage\nsessionStorage.clear();\n</code></pre> <ul> <li>Rq: It's important to note that localStorage and sessionStorage are limited in terms of storage size (typically a few megabytes) and should not be used to store sensitive data, such as credentials or personal information, as these are accessible in JavaScript and may be subject to security attacks.</li> </ul>"},{"location":"Chapter%202/#practical-work","title":"Practical work","text":"<ul> <li>Check that groups have been created and projects selected correctly</li> <li>You can now start creating your web pages. </li> </ul> <p>Start by creating the home page of your site (home page of a restaurant, museum, school or travel agency). </p> <p>You can then move on to the page where you propose your offers, for example: </p> <ul> <li>the menu for the restaurant </li> <li>paintings and status for the museum, </li> <li>excursion offers for the travel agency </li> <li>departments, staff, classes for the school </li> </ul> <p>Once you've finished these two pages, you can create other pages such as the user login page, the about us page...</p>"},{"location":"Chapter%203/","title":"Chapter 3: Discover a modern web framework: Vue.Js","text":""},{"location":"Chapter%203/#table-of-contents","title":"Table of contents","text":"<ul> <li>Introduction to Vue.js</li> <li>Installation</li> <li>Vue instance</li> <li>Directives Vue.js</li> <li>Components</li> <li>Single File Component (SFC)</li> <li>Vue Router</li> </ul>"},{"location":"Chapter%203/#introduction-to-vuejs","title":"Introduction to Vue.js","text":"<p>Why use a web framework?</p> <ul> <li>Ease of development</li> <li>Saves development time</li> <li>Ease of maintenance</li> <li>Abstraction of low-level functionality</li> </ul> <p>Presentation </p> <ul> <li> <p>Vue3 is the default version since February 2022 (Vue3 release date: January 2020 ).</p> </li> <li> <p>Modern framework used on a large scale.</p> </li> <li> <p>Lean and flexible front-end Framework. </p> </li> <li> <p>Similar to related frameworks such as Angular and React.js.</p> </li> <li> <p>Reactive : vue automatically tracks changes in JavaScript state and efficiently updates the DOM when changes occur.</p> </li> <li> <p>Conditional rendering: <code>(v-if, v-else, v-for \u2026 )</code>. </p> </li> <li> <p>Many developement tools : Vue-CLI, Vue-router, Vuex-Store, ESLint plugin \u2026 </p> </li> </ul> <p>Comparison with Angular and ReactJs</p> <p></p> <ul> <li>Stars on GitHub are a measure of a project's popularity among GitHub users.  it gives a general indication of its popularity within the developer community: </li> </ul> <p></p> <p>Single Page Application SPA</p> <ul> <li> <p>SPAs allows users to load a web page only once. </p> </li> <li> <p>A separate update of the page rather than the entire page, which allows the user to interact much more dynamically. </p> </li> <li> <p>Control the launch of new pages within the same domain, no more complete page refreshes are required. </p> </li> <li> <p>UX improvement.</p> </li> </ul> <p></p>"},{"location":"Chapter%203/#installing-vuejs","title":"Installing Vue.js","text":"<ul> <li> <p>Either by including the script: <pre><code>&lt;script type = \"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt; &lt;/script&gt;\n</code></pre></p> </li> <li> <p>Either by using NPM (Node Package Manager): <code>npm install vue</code> </p> </li> </ul> <p>Rq: if you're going to use the manage npm package, you'll need to install the nodejs server: installing nodejs</p>"},{"location":"Chapter%203/#vue-instance","title":"Vue instance","text":"<ul> <li>In Vue.js, a \"Vue instance\" refers to a Vue application instance created using the Vue constructor. </li> <li> <p>A Vue instance is the entry point to any Vue.js application and represents the entire Vue application.</p> </li> <li> <p>A view instance is created by passing options:      1- el: the id of the HTML element to which we want to apply the view.      2- data: the data to pass to the view.      3- Methods: methods to call from the view       4- Computed: these are methods that do not change results if they are called several times</p> </li> </ul> <p><pre><code>&lt;html&gt;\n    &lt;head&gt;\n    &lt;script type = \"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt; &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;\n            &lt;p&gt;{{message}}&lt;/p&gt;\n            &lt;p&gt;{{num}}&lt;/p&gt;\n            &lt;button @click=\"randomnumber\"&gt;Update&lt;/button&gt;\n            &lt;p&gt;{{ rand }}&lt;/p&gt;\n            &lt;p&gt;{{ rand }}&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;script&gt;\n            new vue({\n                el:'#app',\n                data(){\n                 return { \n                    message:'hello world'\n                    num:0\n                };\n                },\n                methods:{\n                    randomnumber(){\n                        this.num=Math.random();\n                    }\n                },\n                computed:{\n                    rand(){\n                        return Math.random();\n                    }\n                }\n            })\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> \u2794Here the data and the DOM are coupled, and everything is now declarative. If the message variable is modified in JavaScript, the template will be automatically updated.</p> <p>\u2794There is no longer any need to interact directly with HTML (An application attaches to a single DOM element (#app in our case) and then controls it entirely).</p>"},{"location":"Chapter%203/#vuejs-directivesrendering","title":"Vue.js: Directives(Rendering)","text":"<p>V-text : Update the textual content of the element.</p> <ul> <li>Param : string</li> <li>Details : works by setting the element's textContent property, so it will overwrite any existing content inside the element.</li> </ul> <p><pre><code>&lt;span v-text=\"msg\"&gt;&lt;/span&gt;\n&lt;!--same as --&gt;\n&lt;span&gt;{{msg}}&lt;/span&gt;\n</code></pre> V-html : Update the textual content of the element.</p> <ul> <li>Param : string</li> <li>Details : v-html content is inserted as raw html</li> </ul> <p><pre><code>&lt;html&gt;\n    &lt;head&gt;\n    &lt;script type = \"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt; &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;\n            &lt;p v-html=\"msg\"&gt;&lt;/p&gt;\n\n        &lt;/div&gt;\n        &lt;script&gt;\n            new vue({\n                el:'#app',\n                data(){\n                 return { \n                    message:\"&lt;h1&gt;it's a title&lt;/h1&gt;\" \n                };\n                },\n            })\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> V-if/ v-else-if /v-else : Conditionally render a template element or fragment based on whether the expression value is true.</p> <ul> <li>Param : condition</li> <li>Details : check if the parameter content is true <pre><code>&lt;html&gt;\n    &lt;head&gt;\n    &lt;script type = \"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt; &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;\n        &lt;div v-if=\"type=='A'\"&gt;\n          A\n        &lt;/div&gt;\n        &lt;div v-if=\"type=='B'\"&gt;\n          B\n        &lt;/div&gt;\n        &lt;div v-if=\"type=='C'\"&gt;\n          C\n        &lt;/div&gt;\n        &lt;div else&gt;\n          Not A/B/C\n        &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;script&gt;\n            new vue({\n                el:'#app',\n                data(){\n                 return { \n                    type=\"Z\"\n                };\n                },\n            })\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> </ul> <p>V-on : attach an event listener to an element - Param : method - Details : The type of event is indicated by the argument. The expression can be a method name or an inline statement</p> <p><pre><code>&lt;!--method handler--&gt;\n&lt;button v-on:click=\"doThis\"&gt;click&lt;/button&gt;\n\n&lt;!--dynamic event--&gt;\n&lt;button v-on:[event]=\"doThis\"&gt;click&lt;/button&gt;\n\n&lt;!--inline statement--&gt;\n&lt;button v-on:click=\"doThis('hello',$event)\"&gt;click&lt;/button&gt;\n\n&lt;!--shorthand--&gt;\n&lt;button @click=\"doThis\"&gt;click&lt;/button&gt;\n\n&lt;!--shorthand dynamic event--&gt;\n&lt;button @[event]=\"doThis\"&gt;click&lt;/button&gt;\n\n&lt;!--stop propagation--&gt;\n&lt;button @click.stop=\"doThis\"&gt;click&lt;/button&gt;\n</code></pre> V-bind : Dynamically bind one or more attributes or a component to an expression.</p> <ul> <li>This makes HTML attributes responsive to data changes in your Vue application.</li> </ul> <p><pre><code>&lt;html&gt;\n    &lt;head&gt;\n    &lt;script type = \"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt; &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;\n        &lt;p v-bind:style=\"{ color: textColor }\"&gt;This is a text with a dynamic color.&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;script&gt;\n            new vue({\n                el:'#app',\n                data(){\n                 return { \n                    textColor: 'red' // Text color initialization\n                };\n                },\n            })\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> V-model : Create a two-way binding on a form input element or component.</p> <ul> <li>Details : varies according to the value of the form input element or component output.</li> </ul> <p>Limited to : <code>&lt;input&gt;, &lt;textarea&gt;, &lt;select&gt;</code></p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n    &lt;script type = \"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt; &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;\n          &lt;input type=\"text\" v-model=\"message\"&gt;\n        &lt;/div&gt;\n        &lt;script&gt;\n            new vue({\n                el:'#app',\n                data(){\n                 return { \n                    message: '' //  initialization of the message\n                };\n                },\n            })\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>V-for : to iterate over a collection of data.</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"app\"&gt;\n        &lt;ul&gt;\n            &lt;li v-for=\"item in items\" :key=\"item.id\"&gt;\n                {{ item.name}}\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        new Vue({\n            el: '#app',\n            data() {\n                return {\n                    items: [\n                        { id: 1, name: 'Item 1' },\n                        { id: 2, name: 'Item 2' },\n                        { id: 3, name: 'Item 3' }\n                    ]\n                };\n            },\n            mounted() {\n                // Add a new element to items\n                this.items.push({ id: 4, name: 'Item 4' });\n            }\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Chapter%203/#components","title":"Components","text":"<ul> <li> <p>Vue components are one of the important features of VueJS that creates custom elements, which can be reused in HTML.</p> <ol> <li>Components are abstractions used to build large applications</li> <li>They are reusable and self-contained.</li> <li>All html views can be broken down into components</li> </ol> </li> </ul> <p></p> <ul> <li>In Vue, a component is a Vue instance with well-predefined options. Example : </li> </ul> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"app\"&gt;\n        &lt;component1&gt; &lt;/component1&gt;\n        &lt;custom-list-item v-for=\"item in items\" :key=\"item.id\" :name=\"item.name\"&gt;&lt;/custom-list-item&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        //Create component\n        Vue.component('component1', {\n            template: '&lt;h1&gt; This is the title of the component &lt;/h1&gt;' // Template of the component\n        });\n        // We can also pass parameters to a component custom-list-item\n        Vue.component('custom-list-item', {\n            props: ['name'], // Define the property 'name' for the component\n            template: '&lt;li&gt;{{ name }}&lt;/li&gt;' // Template of the component\n        });\n\n        // creation of vue instance\n        new Vue({\n            el: '#app',\n            data() {\n                return {\n                    items: [\n                        { id: 1, name: 'Item 1' },\n                        { id: 2, name: 'Item 2' },\n                        { id: 3, name: 'Item 3' }\n                    ]\n                };\n            }\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Local components - We can declare the component on the view instance.</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"app\"&gt;\n        &lt;custom-list-item v-for=\"item in items\" :key=\"item.id\" :name=\"item.name\"&gt;&lt;/custom-list-item&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        // creation of vue instance\n        new Vue({\n            el: '#app',\n            data() {\n                return {\n                    items: [\n                        { id: 1, name: 'Item 1' },\n                        { id: 2, name: 'Item 2' },\n                        { id: 3, name: 'Item 3' }\n                    ]\n                };\n            },\n            components:{\n                // Local component\n           'custom-list-item': {\n            props: ['name'], // Define the property 'name' for the component\n            template: '&lt;li&gt;{{ name }}&lt;/li&gt;' // Template of the component\n        };\n            }\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Chapter%203/#single-file-components-sfc","title":"Single File Components - SFC","text":"<ul> <li> <p>A world of components. </p> </li> <li> <p>A component only depends on its internal data. </p> </li> <li> <p>A component may contains sub-components. </p> </li> <li> <p>Components are integrated in \".vue\" SFC files.</p> </li> <li> <p>A SFC file contains :          1. The template (HTML) : content rendering          2. Dynamic (JS) : content handling         3. Style (CSS) : content styling (scoped or global)</p> </li> </ul> <p></p>"},{"location":"Chapter%203/#vue-cli","title":"Vue CLI","text":"<p>Vue CLI is a Javascript Framework that lets you develop \"Single Page Applications\". - Allows you to develop applications that are made with responsive javascript - Allows the user to have a very nice and modern user experience. - A command-line interface for e\ufb03cacious development. - Vue CLI requires Node.js version 8.9 or higher (for new projects, it is now recommended to use 'vue create\u2019).</p> <pre><code>#npm install -g @vue/cli\n#vue \u2014version\n#vue create myvueproject\n</code></pre> <ul> <li>When creating VueProject (with \"vue create\"), you can specify certain functionalities such as Babel, Router, Vuex...</li> </ul> <p>Main elements of the project View :      - \"node_modules\"\u00a0 directory : all your project's dependencies, directly managed by \"npm\".      - \"src\" directory: source code for your project (components, pages, etc.)      - File \"package.json\" : your project's main configuration file.      - File \".gitignore : contains the names of files/directories to be ignored when committing the project to Git.</p>"},{"location":"Chapter%203/#props-and-events","title":"Props and Events","text":"<p>Objective: Share data between different pages ( composed of components).</p> <ul> <li>Props and events are used to transfer data between parent and child components.</li> </ul> <p>Parent -&gt;Child: to update the child's <code>\"props\"</code> data. Child -&gt; Parent: <code>\"$emit\"</code> event of a method or variable from the child to the parent, which retrieves the object via \"v-on\" or \"@\" directives. </p> <p>Example with props: - Parent component <pre><code>&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;!-- Utilisation du composant enfant et passage de la propri\u00e9t\u00e9 'message' --&gt;\n    &lt;child-component message=\"Hello from parent\"&gt;&lt;/child-component&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport ChildComponent from './child-component.vue';\n\nexport default {\n  components: {\n    ChildComponent\n  }\n};\n&lt;/script&gt;\n\n&lt;style&gt;\n/* Styles globaux peuvent \u00eatre ajout\u00e9s ici */\n&lt;/style&gt;\n</code></pre> - Child component</p> <pre><code>&lt;template&gt;\n  &lt;p&gt;{{ message }}&lt;/p&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: ['message']\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n/* Styles sp\u00e9cifiques au composant peuvent \u00eatre ajout\u00e9s ici */\n&lt;/style&gt;\n</code></pre> <p>Example with $emit:</p> <ul> <li> <p>The use of <code>$emit</code> and custom events are common in Vue.js to enable communication between parent and child components. </p> </li> <li> <p>Suppose you have two components, a parent called ParentComponent and a child called ChildComponent. The parent wishes to receive information from the child when a button is clicked in the child.</p> </li> </ul> <p>Parent component <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Parent Component&lt;/h2&gt;\n    &lt;!-- Utilisation du composant enfant et \u00e9coute de l'\u00e9v\u00e9nement 'custom-event' --&gt;\n    &lt;child-component @custom-event=\"handleCustomEvent\"&gt;&lt;/child-component&gt;\n    &lt;!-- Affichage du message re\u00e7u de l'enfant --&gt;\n    &lt;p&gt;Message from child: {{ messageFromChild }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport ChildComponent from './child-component.vue';\n\nexport default {\n  components: {\n    ChildComponent\n  },\n  data() {\n    return {\n      messageFromChild: ''\n    };\n  },\n  methods: {\n    // Fonction de gestion de l'\u00e9v\u00e9nement personnalis\u00e9 \u00e9mis par l'enfant\n    handleCustomEvent(message) {\n      this.messageFromChild = message;\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre> Child component <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h3&gt;Child Component&lt;/h3&gt;\n    &lt;button @click=\"sendMessageToParent\"&gt;Send Message to Parent&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  methods: {\n    // Fonction pour envoyer un message au parent via un \u00e9v\u00e9nement personnalis\u00e9\n    sendMessageToParent() {\n      const message = 'Hello from child!';\n      // \u00c9mettre un \u00e9v\u00e9nement personnalis\u00e9 avec le message\n      this.$emit('custom-event', message);\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre></p>"},{"location":"Chapter%203/#vue-router","title":"vue-router","text":"<ul> <li> <p>Users need different URLs to distinguish one page from another.</p> </li> <li> <p>Vue router allows components to be mapped to routes.</p> </li> </ul> <p><code># npm install vue-router@4</code>         Or               <code># vue add router</code></p> <ol> <li> <p>Configure routes: path, name and component for each route in a Js file. </p> </li> <li> <p>Add  and  in the given page template: <p><code>&lt;router-link&gt;</code>: allows Vue-router to change the Url without reloading the page.</p> <p><code>&lt;router-view&gt;</code>: allows Vue-router to display the contents of the URL (mapping component).</p> <ul> <li> <p>You can see the Official documentation of vue router</p> </li> <li> <p>Example: Let's suppose we have two components: Home.vue and About.vue. We'll use router-link to create a navigation link between these two components.</p> </li> </ul> <p>Home.vue <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Home page&lt;/h1&gt;\n    &lt;!-- Link to About page --&gt;\n    &lt;router-link to=\"/about\"&gt;Go to the about page&lt;/router-link&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Home'\n}\n&lt;/script&gt;\n</code></pre></p> <p>About.vue <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;\u00c0 propos de nous&lt;/h1&gt;\n    &lt;!-- Link to home page --&gt;\n    &lt;router-link to=\"/\"&gt;Return to the home page&lt;/router-link&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'About'\n}\n&lt;/script&gt;\n</code></pre></p> <ul> <li> <p>We use <code>&lt;router-link&gt;</code> to create navigation links between components. The to attribute specifies the URL to which we want to navigate.</p> </li> <li> <p>In Home.vue, the link points to /about, so when you click on it, you'll be taken to the About.vue page.</p> </li> <li> <p>In About.vue, the link points to / , so when you click on it, you'll be taken to the Home.vue page.</p> </li> <li> <p>Routes are defined in the router configuration file(router/index.js) to manage navigation between the various pages of your application.</p> </li> </ul>"},{"location":"Chapter%203/#practical-work","title":"Practical work","text":"<ul> <li>Creation of a Vue CLI project</li> <li>Translation of project pages (html, css and javascript) into components</li> <li>Configuration of the different routes in index.js file.</li> </ul>"},{"location":"Chapter%204/","title":"Chapter 4: Introduction to the server side","text":""},{"location":"Chapter%204/#table-of-contents","title":"Table of contents","text":"<ul> <li>Web server definition </li> <li>HTTP / HTTPS protocols </li> <li>HTTP request methods (GET, POST) </li> </ul>"},{"location":"Chapter%204/#web-server","title":"Web server","text":"<p>A web server is a software application or hardware device that serves content to clients over the internet or an intranet using HTTP (Hypertext Transfer Protocol) or its secure variant, HTTPS (HTTP Secure). Web servers are responsible for delivering web pages, files, and other resources requested by clients, typically web browsers.</p> <p></p> <p> what is the role of a web server? </p> <ul> <li>Website data is generally stored in a database </li> <li>Relational database: MySQL, Postgres...</li> <li>Non-relational: MongoDB, etc.</li> </ul> <p>\u2192 The role of the server is to act as an intermediary between the user and the database.</p> <p>\u2192The database is never directly accessible to the user</p> <p>\u2192 The role of the server in a website is to: </p> <ul> <li>Store user information</li> <li>Send the right information to users</li> <li>Ensure data security</li> <li>Check access and modification rights</li> <li>Validate request consistency</li> </ul>"},{"location":"Chapter%204/#http-https-protocols","title":"HTTP / HTTPS protocols","text":"<p>How do computers communicate with each other? What languages do they use to communicate with each other?  \u2192 Protocols enable machines to talk to each other.</p> <ul> <li>Hypertext Transfer Protocol is a client-server communication protocol developed for the World Wide Web. </li> <li>It enables web pages to be exchanged between client and server. HTTPS is the secure variant, using Transport Layer Security protocols.</li> <li>low-level protocols:<ul> <li>TCP: invented by vint cerf</li> <li>UDP</li> </ul> </li> <li>High- level protocols: <ul> <li>HTTP: HyperText Transfer Protocol</li> <li>HTTPS: Secured HTTP </li> <li>SMTP: send e-mails</li> </ul> </li> </ul> <p>HTTP protocol basic principle</p> <p></p> <p>HTTP protocol: Example</p> <p></p> <p>Different codes sent with the server response</p> <ul> <li>Each HTTP response contains a status code, which is a number indicating whether or not the request was successful.</li> <li> <p>There are many possible codes, including the following: 1XX Information: The request has not been completed, but is in progress. 2XX Success: Query completed successfully. 3XX Redirection 4XX Client-side error: The client has sent the wrong request 5XX Server-side error: The server cannot process the request due to an internal error </p> </li> <li> <p>Example: 200: Successful request 301 and 302: redirection, permanent and temporary respectively 401: user not authenticated 403: access denied 404: page not found 500 and 503: server error 504: server did not respond</p> </li> </ul>"},{"location":"Chapter%204/#http-request-methods","title":"http request methods","text":"<ul> <li>The existing methods are: GET, HEAD, POST, PUT, DELETE, PATCH, OPTIONS, CONNECT, TRACE GET: Request to retrieve data, must not modify anything on the server side POST: Sends data to a server, e.g. to add an item to a shopping cart PUT: Adds or replaces a resource on the server.</li> </ul> <p>\u2192 The difference with POST is that a PUT request is idempotent: calling it once or several times in succession will have the same effect, whereas several POST requests could have side effects, such as placing an item several times in a shopping cart. DELETE: Delete a resource PATCH: Modify only part of a resource, unlike PUT, which sends the complete representation of the resource to be modified <p>\u2192HTTP responses can contain just about anything (file, streamed content, html, css, javascript, json, etc.).</p> <p>IP address Vs host names</p> <p>IP address: - Every computer has an address. This is called an IP address. - It's a sequence of numbers like 205.89.177.26. - It can be seen as a kind of telephone number. - So, in theory, you can go to a website by typing the server's address directly into your address bar.</p> <p>Host names and DNS: - DNS stands for 'Domain Name System'. It translates host names into IP addresses. - The DNS server acts like a directory consulted by a computer when accessing another computer on a network. - In other words, the DNS server is the service that associates an IP address with a web site (or a connected computer or server), just as a telephone directory associates a telephone number with a subscriber's name.</p> <p>Anatomy of an HTTP GET request</p> <p></p> <p>Anatomy of an HTTP POST request</p> <p></p> <p>Anatomy of an HTTP GET response </p> <ul> <li> <p>Some queries may also contain a body, i.e. data such as files, or query elements too large to be contained in the query part of the request.</p> </li> <li> <p>The methods used to transmit a body are: POST, PUT, DELETE, PATCH</p> </li> <li> <p>When a request contains a body, the Content-Type header is used to define the type of request.</p> </li> <li> <p>A POST request is generally sent from an HTML form, and causes a change on the server.</p> </li> <li> <p>When a form is sent, several body formats may appear: application/x-www-form-urlencoded: series of keys=values separated by '&amp;'. multipart/form-data: each value is sent as a block of data, with a delimiter separating each part  application/json: the form is sent as a json {\"key1\": \"value1\", \"key2\": \"value2\"}.</p> </li> <li> <p>The body type depends strongly on the type of data sent.</p> </li> </ul> <p>The browser (client)</p> <ul> <li>In an HTTP request, the browser is the client.</li> <li>The browser makes HTTP requests at several points in the life cycle of a web page:</li> <li>When the page first loads, when the user enters the site URL</li> <li>When the HTML contains script, css, image or equivalent tags that need to be retrieved.</li> <li>When the user clicks on a link and changes page  </li> </ul> <p>Web page life cycle </p>"},{"location":"Chapter%205/","title":"Chapter 5 : Node.js / Express.js","text":""},{"location":"Chapter%205/#table-of-contents","title":"Table of contents","text":"<ul> <li>Introduction to Node.js</li> <li>Node.js modules</li> <li>Framework Express.js</li> <li>Routing</li> <li>Cookies</li> </ul>"},{"location":"Chapter%205/#nodejs-server","title":"Node.js server","text":"<ul> <li> <p>A web server enables you to store web content and make it accessible to users in a secure manner. When you load an Internet address into your web browser, the elements you see on a page are always sent to your computer from a web server.</p> </li> <li> <p>For a website to be accessible at all times, the web server on which it is hosted must be permanently connected to the Internet.</p> </li> <li> <p>Node is the runtime that allows us to write all our server-side tasks in JavaScript, such as business logic, data persistence and security.</p> </li> <li> <p>The Node.js server is a computer server that uses Node.js as an execution platform to run server applications written in JavaScript. </p> </li> <li> <p>Unlike traditional servers that use server-side programming languages such as PHP, Java, Python, etc., Node.js servers leverage Google Chrome's V8 JavaScript engine to execute server-side JavaScript code.</p> </li> <li> <p>The Node.js server can be used for a variety of tasks, such as building web applications, implementing APIs (application programming interfaces), manipulating files, accessing databases and more. </p> </li> <li> <p>Thanks to its asynchronous, non-blocking nature, Node.js can handle large numbers of simultaneous connections efficiently.</p> </li> </ul> <p></p> <p></p> <p>My first file with Node JS</p> <ul> <li>To install Node Js, download it from this link: NodeJs</li> <li> <p>After installation, you can view the version of Node Js installed by typing: <code>node -version</code>, from a cmd terminal or from windows powershell.</p> </li> <li> <p>Create a new hello.js file under the desktop (or another folder), and add these two lines:</p> </li> </ul> <pre><code>// hello.js file\n\nvar msg='Hello World';\nconsole.log(msg);\n</code></pre> <ul> <li>Execute the file from the terminal by typing:<code>node Hello.js</code></li> </ul> <p>Modules in Node JS </p> <ul> <li>Node also has a module manager called npm (Node Package Manager).</li> <li>Node.js has a very rich environment of modules, called \"dependencies\". </li> <li>Unlike Python, which contains many built-in modules, Node.js has very few of them. </li> <li>Modules are installed with the command: <code>$npm install &lt;module name&gt;</code> </li> <li>Modules are saved in the node_modules subfolder of the current project.  When using git, you should never save node_modules in the git, as this causes numerous problems.</li> <li> <p>Modules required for program operation are declared in the package.json file </p> </li> <li> <p>Dependency management is based on a list of dependencies located in a package.json file. To initialize the project and this file, simply launch a command prompt in your project folder and use the command : <code>$npm init</code></p> </li> <li> <p>This process generates a blank package.json file containing the project name (in lower case only), author, version, description and more. This file will contain all the details of all npm packages.</p> </li> <li> <p>In this initialization stage, you need to skip all the parameterization steps except the \"Entry point\", where you need to specify the main, in this case the \"server.js\" file (not yet created).</p> </li> </ul> <p></p> <p>Create Node Server</p> <ul> <li>The code below allows you to create a Node server: </li> </ul> <p><pre><code>const http = require ('http');   // Import package, access http object \nconst server = http.createServer((req, res) =&gt; { // create the server using the http package's createServer function. This method takes two arguments: the request and the response (req and res).\n\nres.end('Here is the server response!'); // This method will be called every time the server receives a request: it's the server response\n});// now we have a server \nserver.listen(process.env.PORT || 3000); // the server will wait for requests sent to a port (by default 3000), \"process.env.PORT\", when the environment on which your server is running sends you a port to use.\n\n//This program listens to HTTP requests and responds to them.\n</code></pre> - Node uses the CommonJS module system, so you can import the contents of a JavaScript module.</p> <ul> <li> <p>We use the require keyword rather than the import keyword. This system is particularly useful as it allows us to import Node's basic modules very easily (such as the http module) without specifying the exact path of the file.</p> </li> <li> <p>Node knows that it must import a basic module if you don't specify a relative path (starting with ./ or / , for example).</p> </li> <li> <p>To start the server, use <code>$node server</code> (if your file is server.js)</p> </li> </ul>"},{"location":"Chapter%205/#expressjs","title":"Express.js","text":"<ul> <li>Express.js was created in 2010 by TJ Holowaychuk.</li> <li>Web framework: set of functionalities for creating a Web API.</li> <li>Framework without opinions</li> <li>Express is a Node-based framework that makes it easy to create and manage Node servers.</li> </ul> <p>First Express application</p> <ul> <li> <p>Install Express: To add Express to your project, run the following command int the terminal from your folder:<code>$npm install express \u2013-save</code></p> </li> <li> <p>We created an app.js file in the project folder and added the code below:</p> </li> </ul> <p><pre><code>const express = require('express');// To import the express package, use the require command\n\nconst app = express();// to create an express application\n\napp.use((req, res) =&gt; {\n   res.json({ message: 'Your request has been received!' }); \n});// If you try to make a request to your server, you'll need to retrieve a JSON object containing the message we've specified.\n\nmodule.exports = app;// we're going to export this application (this constant) so that it can be used to access other files in our folder, in particular our node server.\n</code></pre> - In the file server.js, we need to modify it like this: </p> <pre><code>const http = require('http');\n    const app = require('./app'); // Import our express application\n\n    app.set('port', process.env.PORT || 3000);// We need to tell the express application which port to run on\n\n    const server = http.createServer(app); // set the express app as an argument to the createServer method\n\n    server.listen(process.env.PORT || 3000);\n</code></pre> <p> Middlewares</p> <ul> <li> <p>An Express application is basically a series of functions called middleware.</p> </li> <li> <p>Each piece of middleware receives request and response objects, can read them, analyze them and manipulate them as required.</p> </li> <li> <p>Express middleware also receives the next method, which allows each middleware to pass execution to the next middleware.</p> </li> <li> <p>A middleware is simply a function that takes the request and response as parameters and passes the response to the next middleware (i.e. another function).</p> </li> <li> <p>Example: We added middleware to app.js</p> </li> </ul> <pre><code>const express = require('express');\n\nconst app = express();\n\napp.use((req, res, next) =&gt; {\nconsole.log('Request received!');\n  next();\n}); // The first middleware that registers \"Request received!\" in the console and passes on execution\n\n\napp.use((req, res, next) =&gt; {\n  res.status(201);\n  next();\n}); //The second middleware adds a 201 status code to the response and passes execution\n\napp.use((req, res, next) =&gt; {\n  res.json({ message: 'Your request has been received!' });\n  next();\n}); //The third middleware sends the JSON response and passes execution;\n\napp.use((req, res, next) =&gt; {\n  console.log('Answer sent successfully!');\n}); // The last middleware registers \"Response sent successfully!\" in the console, so it doesn't need to call the next() function at the end, because it's the last middleware.\n\nmodule.exports = app;\n</code></pre> <p>\u2192The Express framework is installed and registered in the .json package with <code>$npm install</code> express .</p> <p>\u2192To create an Express application, simply call the express() method.</p> <p>\u2192Middleware is a block of code that handles your application's requests and responses.</p>"},{"location":"Chapter%205/#routing","title":"Routing","text":"<ul> <li> <p>Express makes it easy to manage multiple routes: a routing method is derived from one of the HTTP methods, and is linked to an instance of the express class.</p> </li> <li> <p>Example of a get and post route: The following code is an example of the routes that are defined for GET and POST methods to the application route.</p> </li> </ul> <p><pre><code>//GET method route\napp.get('/',function(req,res){\n    res.send('GET request to the homepage')\n});\n\n//POST method route\napp.post('/',function(req, res){\n    res.send('POST request to the homepage');\n});\n</code></pre> \u2192Note that you can replace \"get\" with any HTTP request method you wish to process (GET, POST, PUT, DELETE, PATCH, etc.). You can also use \"all\" if you want to accept all methods.</p> <p>\u2192This feature makes it very easy to create a REST API with Express.</p> <p>Route parameters</p> <p>Each time a request is received, the parameters are received in the req object, and divided into 3 parts: - req.query: GET params GET /user?id=1 - req.body: POST params, not visible to the user - req.params: framework-specific: GET /user/1</p> <p>app.all() method</p> <ul> <li> <p>There is a special routing method, app.all(), which is not derived from an HTTP method. This method is used to load middleware functions to a path for all request methods.</p> </li> <li> <p>In the following example, the handler will be executed for '/secret' requests, whether you use GET, POST, PUT, DELETE or any other HTTP request method supported in the http module.</p> </li> </ul> <pre><code>app.all('/secret', function(req,res,next){\n    console.log('Accessing the secret section...');\n    next();//pass control to the next handler\n});\n</code></pre>"},{"location":"Chapter%205/#cookies","title":"Cookies","text":"<ul> <li> <p>Cookies are the mechanism by which browsers identify themselves on web sites.</p> </li> <li> <p>A cookie is a key=value character string specific to each domain name, sent by the browser each time a new request is made to the same domain name.</p> </li> <li> <p>The cookie generally contains no information itself, but is merely an identifier enabling the server to find the user's session in its database.</p> </li> <li> <p>Example of a cookie: sessionId=s%3AxjegAURNVOR.ETPEueXb9vNkSRFH_U43238439%2FVi4c8hI</p> </li> <li> <p>Cookies are particularly sensitive information that must be protected at all costs. Stealing a cookie is tantamount to usurping a user's identity</p> </li> </ul>"},{"location":"Chapter%205/#session","title":"Session","text":"<ul> <li>Sessions are a way of identifying the user through requests</li> <li>You can link a session to a user account</li> <li> <p>A req.session object is shared between requests Anything you write to it will be specific to the current user</p> </li> <li> <p>Example: </p> </li> </ul> <pre><code> const users = [/** users **/]\n app.post('/login', (req, res, next) =&gt; {\n  const { login, pw } = req.body          // POST request fields\n    if (req.session.userId) {             // if userId has already been defined\n    res.status(401)                       // we know that a login request\n    res.send(\"you are already connected\") // has already succeeded\n    return\n  }\n                                          // Otherwise, we check the field in users\n  const user = users.find(u =&gt; u.login === login &amp;&amp; u.password == pw)\n  if (user) {                             // if the user is found\n    req.session.userId = user.id          // define the session's userId field\n    res.send(\"OK\")\n    return\n  }\n  res.status(401)\n  res.send(\"didn\u2019t find any user matching your id and password\")\n  })\n</code></pre> <ul> <li>Get User: An example of the use of middleware, here with express-session to manage user sessions.</li> </ul> <pre><code>   const express = require('express');\n   const session = require('express-session');\n   const app = express();\n\n   app.use(session(/* stuff */))\n\n   app.use(async (req, res, next) =&gt; {\n  try {\n    req.user = await db.getUser(req.session.userId);\n  } catch (err) {\n    next(err);\n  }\n  })\n\n  app.get('/me', (req, res, next) =&gt; {\n     res.json(req.user);\n     })\n</code></pre>"},{"location":"Chapter%206/","title":"Chapter 6: Authentication and database (security, data persistence)","text":""},{"location":"Chapter%206/#table-of-contents","title":"Table of contents","text":"<ul> <li>Authentication: user registration, hash with bcrypt</li> <li>Connecting a MySQL database to a Node.js application</li> <li>Executing SQL queries on a MySQL database with NodeJS</li> <li>Using a MySQL database in NodeJS with Sequelize</li> </ul>"},{"location":"Chapter%206/#some-concepts-to-know-before-you-start","title":"some concepts to know before you start","text":"<p>Data flow</p> <p></p> <p></p> <p>Reminder: With callbacks </p> <pre><code> store.getUser('louis', (err, user1) =&gt; {\n if (err) throw err\n store.getUser('jean-pierre', (err, user2) =&gt; {\n if (err) throw err\n store.getUser('marie', (err, user3) =&gt; {\n if (err) throw err\n console.log(`${user1.name} and ${user2.name} and ${user3.name}`)\n   })\n  }) })\n</code></pre>  \u2192 This can be a nightmare if you have several callbacks where each one requires the result of the previous operation  <p>Reminder: With promises </p> <pre><code>const washThePlates = new Promise(/** clean plates **/)\nwashThePlates\n.then(function (numberOfPlates) {\nreturn startWashingKnives() // startWashingKnives() return a Promise })\n.then(function () { //  \u201cthen\u201d is called if and only if the knives are clean\nreturn startSleeping() // startSleeping() returns also a Promise })\n.catch(function (err) {\nconsole.error('something went wrong', err) })))\n</code></pre>  \u2192 With promises, asynchronous code can be clean. You can instantly understand the sequence of events  <p>Reminder: With the promises and arrow functions</p> <pre><code>    db.getUser(\u2018louis\u2019)\n    .then(user1 =&gt; { return db.getUser(\u2018jean-pierre\u2019)\n    .then(user2 =&gt; { return db.getUser(\u2018marie\u2019)\n    .then(user3 =&gt; {\n    console.log(`${user1.name} and ${user2.name} and ${user3.name}`)}) \n    })\n    })\n.catch((err) =&gt; { console.error(\u201csomething went wrong\u201d, err) })\n</code></pre> <p>\u2192 You can pass \"stringified json\" to \"body\". </p> <p>\u2192 To analyze the search result, you need to transform it with response.json().</p> <p>Async/ Await</p> <p>The async and await keywords are features introduced in ECMAScript 2017 (ES8) to facilitate promise management and make asynchronous code more readable and easier to understand. They are often used in conjunction with promises to simplify the syntax of asynchronous operations.</p> <p>async: The async keyword is used to declare an asynchronous function. A function declared with async always returns a promise. Within an async function, you can use the await keyword to suspend execution of the function until a promise is resolved, and return the resolved value of the promise. </p> <p><pre><code>async function getUsers () {\nconst user1 = await db.getUser(\u2018louis\u2019)\nconst user2 = await db.getUser(\u2018jean-pierre\u2019)\nconst user3 = await db.getUser(\u2018marie\u2019)\nreturn '${user1.name} and ${user2.name} and ${user3.name}'\n}\ntry {\nconst result = await getUsers()\nconsole.log(result)\n} catch (err) {\nconsole.error(\u201csomething went wrong\u201d, err)\n}\n</code></pre> \u2192 await: If the value of the expression is not a promise, it is converted to a resolved promise with this value.</p> <p>fetch et await</p> <ul> <li>Using fetch with await and async is cleaner</li> </ul> <pre><code>async function login (username, password) {\ntry {\nconst response = await fetch('/api/login', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' }, body: JSON.stringify({ username, password })\n})\nconst data = await response.json() console.log('data', data)\n} catch(err) {\nconsole.error('network error', err)\n}\n}\n</code></pre> <p>axios</p> <p>Axios is a module designed to simplify web requests </p> <ul> <li> <p>Axios is a promise-based HTTP client designed for Node.js and the browser designed to simplify web requests </p> </li> <li> <p>With Axios, we can easily send asynchronous HTTP requests to REST APIs and perform create, read, update and delete operations.</p> </li> <li> <p>It's an open source collaboration project hosted on Github.</p> </li> <li> <p>You install it by running the following command: <code>npm install axios</code> </p> </li> <li> <p>Lorsque nous envoyons une requ\u00eate \u00e0 l\u2019API \u00e0 l\u2019aide d\u2019axios, elle renvoie une r\u00e9ponse. L\u2019objet de r\u00e9ponse se compose de : </p> <ul> <li>data : les donn\u00e9es renvoy\u00e9es par le serveur.</li> <li>status : le code HTTP renvoy\u00e9 par le serveur.</li> <li>statusText : le statut HTTP renvoy\u00e9 par le serveur.</li> <li>headers : en- t\u00eates obtenus du serveur.</li> <li>config : la configuration de la requ\u00eate d\u2019origine.</li> <li>request : l\u2019objet de la requ\u00eate </li> </ul> </li> </ul> <p>Example:</p> <pre><code>async function login(username, password) {\ntry {\nconst response = await axios.post('/api/login', {\nusername, password\n})\nconsole.log('data', response.data) } catch (err) {\nconsole.error('network error', err)\n}\n</code></pre> <pre><code>async function login (username, password) {\ntry {\nconst response = await fetch('/api/login', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' }, body: JSON.stringify({ username, password })\n})\nconst data = await response.json() console.log('data', data)\n} catch(err) {\nconsole.error('network error', err)\n}\n</code></pre>"},{"location":"Chapter%206/#authentication-user-registration-hash-with-bcrypt","title":"Authentication: user registration, hash with bcrypt","text":"<p>The purpose of authentication is to be able to know who is a user</p> <ul> <li> <p>The purpose of authorization is to:</p> </li> <li> <p>authorize or deny an action</p> </li> <li> <p>log who initiated the action</p> </li> <li> <p>First and foremost: NEVER store a password in clear text in a database</p> </li> <li> <p>plaintext = readable, without having passed through a hash mechanism</p> </li> <li> <p>Authentication to a web site involves sessions, which work thanks to cookies stored on the user's computer</p> </li> <li> <p>When the user enters his login and password, it is verified that he is a user. login and password are identical</p> </li> <li> <p>If necessary, we associate the user id with the session: <code>req.session.userId = user.id</code></p> </li> </ul> <p>Hashage: bcrypt</p> <ul> <li>When the user registers, we check that no other user has the same e-mail address, to avoid collisions. </li> <li>Next, we hash the password, generally using the bcrypt module </li> <li>We store the email and password in their hashed form in the database </li> <li>When the user logs in, we retrieve the entry in the database with the identical email address </li> <li>Next, we use the function bcrypt.compare(mdpForm, mdpHash\u00e9EnBDD) </li> <li>This asynchronous function returns true if the two passwords are identical, false otherwise: </li> </ul> <pre><code>if (await bcrypt.compare(mdpForm, mdpHasheBDD)) {\n// congrats\n} else {\n// go out !\n}\n</code></pre> <ul> <li> <p>A hash function is a special function that calculates a digital fingerprint from input data, which is used to quickly identify the initial data, in the same way as a signature is used to identify a person. Hash functions are used in computing and cryptography, for example, to quickly identify files or passwords. </p> </li> <li> <p>When manipulating passwords, the aim is to make it as hard as possible for an attacker to steal the passwords of users</p> </li> <li> <p>A password in its hashed form takes a very long time to recover.</p> </li> <li> <p>With the right algorithms, such as bcrypt or argon2, the time is so long that passwords are considered \"safe\".</p> </li> <li> <p>Paradoxically, this is one of the few areas in computing where you want the algorithm to take as long as possible to execute, even on a graphics card or dedicated circuit</p> </li> </ul> <p>Bcrypt: installation</p> <ul> <li> <p>Install dependency with NPM: <code>npm install bcrypt -save</code></p> </li> <li> <p>Example of password hashing </p> </li> </ul> <pre><code>const bcrypt=require('bcrypt');\nconst saltRounds = 10;\nconst yourpassword = \"mypassword\";\nconst hashedPassword='';\n\nbcrypt.hash(yourpassword, saltRounds,(err, hash)=&gt; {\n    hashedPassword= hash;\n})\n</code></pre> <ul> <li>Example of password verification :</li> </ul> <pre><code>const bcrypt=require('bcrypt')\n\n//load hash from the bd, which was previously stored\n\nbcrypt.compare(myPlaintextPassword, hashedPassword, function(err, res)\n{\n    if(res==true)\n    {\n        //password matched\n    } else {\n        //wrong password\n    }\n});\n</code></pre> <p>Authorization</p> <ul> <li> <p>Authorization consists in determining whether a particular user has access rights to a resource.</p> </li> <li> <p>If you want to check that the user is logged in, simply check that the req.session.userId variable has been defined in a route</p> </li> </ul> <pre><code>router.get('/api/articles', (req, res) =&gt; {\nif (typeof req.session.userId !== 'number') {\nres.status(401).send({ message: 'You cannot access the articles because you are not logged in' }) return\n}\n// reste de la fonction .....\n})\n</code></pre> <ul> <li> <p>Similarly, if you want to check that the user has special rights, you can perform any other type of check.</p> </li> <li> <p>In general, a logged-in user can have one or more profiles (simple user, administrator, etc.).</p> </li> <li> <p>The user profile can be stored as a field in the User table or in a separate table (relationship 1-N)</p> </li> <li> <p>You can also store the profile in the session and use it later to verify authorization.</p> </li> </ul>"},{"location":"Chapter%206/#connecting-a-mysql-database-to-a-nodejs-application","title":"Connecting a MySQL database to a Node.js application","text":"<ul> <li> <p>The purpose of a database (MySQL, MariaDB, PostgreSQL, SQL Server, ...) is to enable data to be persist data, i.e. store it durably</p> </li> <li> <p>The web server (in this case, Node.js), by contrast, sends the data to the client, process the information received and save it in the DB.</p> </li> <li> <p>The web server can be seen as the interface between the user and the database</p> </li> <li> <p>Generally speaking, the database is communicated with via SQL queries</p> </li> <li> <p>Several NodeJS libraries enable you to establish a connection with a MySQL database and execute queries.Among them, the two most popular are: </p> <p>\u2713 mysql, a basic MySQL driver for Node.js written in javascript and requiring no compilation. It's the quickest and easiest way to interact with a MySQL database in Node.</p> <p>\u2713 Sequelize, the most popular library for using SQL-based database management systems database management systems with Node.js. It supports MySQL as well as Postgres, Microsoft SQL, MariaDB... This powerful ORM (Object-Relational Mapping) allows, among other things, the use of promises and the customization of error messages for each field.</p> </li> </ul> <p>Utiliser une base de donn\u00e9es MySQL en NodeJSavec Sequelize</p> <ul> <li> <p>To use Sequelize to interact with your MySQL database in Node, you first need to install the mysql2 driver. This is a separate driver from the mysql module, less popular than the latter, but offering some additional functionality.</p> <p>\u2713 Install mysql2 with npm install : <code>npm install mysql2</code> </p> <p>\u2713 To install Sequelize, type: <code>npm install sequelize</code> </p> <p>\u2713 In your app code, initialize Sequelize with require() : <code>const { Sequelize}=require('sequelize')</code></p> <p>\u2713 In a new Sequelize object, specify the user name, username, password and MySQL database name to establish the connection:</p> <pre><code>const sequelize=new Sequelize(\"DB_name\",\"user_name\",\"user_password\", {\n   dialect: \"mysql\",\n   host: \"localhost\"\n});\n</code></pre> <p>\u2713 Finally, you can check that the connection has been established with authenticate(): </p> <p><pre><code>try{\n   sequelize.authenticate();\n   console.log('connected to mysql data base');\n}catch(error)\n{\n   console.error('connexion error',error);\n}\n</code></pre>  \u2192 This part is not required to run queries on your database</p> <p>\u2713 With the query() function, you can execute any SQL query on your database:</p> <pre><code>const sequelize=new Sequelize(\"Mybdd\", \"user_name\", \"user_password\", {\n   dialect:\"mysql\",\n   host:\"localhost\"\n});\n\ntry {\n   sequelize.authenticate();\n   console.log('connected to my sql data base!');\n   sequelize.query(\"SELECT students.id as 'student_id', students.name as 'student_name', students.course_id, course.name as 'course_name', course.date as 'course_date' FROM students JOIN course on students.course_id=course.id \").then(([results, metadata])=&gt;{\n       console.log(results);\n   })\n}catch(error)\n{\n   console.error('unable to connect', error);\n}\n\n}\n</code></pre> </li> </ul>"},{"location":"Chapter%206/#practical-work","title":"Practical work","text":"<ul> <li>Implement http methods on the project website.</li> <li>Create and configure a database for project website. </li> </ul>"}]}