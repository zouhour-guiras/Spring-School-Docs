{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Acceuil/","title":"Acceuil","text":""},{"location":"Acceuil/#pc001-web-development","title":"PC001-Web development","text":""},{"location":"Acceuil/#description","title":"Description","text":"<p>The aim of this course is to teach methods and techniques that enable managers to lead large projects while controlling costs, avoiding delays, and ensuring quality. The students will be taught the key tools for project Management. They will have to apply them to a very concrete project: A Web site Design based on customer requirements.</p>"},{"location":"Acceuil/#course-goals","title":"Course goals","text":"<p>\u2794  Understand the technologies and protocols underlying the Web Discover the evolution of the Web, from its creation to the present day. \u2794 Master HTML5 and CSS3 standards to create and style Web pages. \u2794 Understand the basics of JavaScript: dynamic functionalities on the Web. \u2794 Discover the tools required for modern client-side Web development.  </p>"},{"location":"Acceuil/#project-requirements","title":"Project requirements","text":"<ul> <li> <p>The students will be organized in 4 groups (including a Project leader, a Technical Manager, a Design manager and a Communication Manager), and will work on 4 different Websites (Museum, School, Travel Agency and Restaurant). </p> </li> <li> <p>Through the course, the students will have to face practical issues jeopardizing or slowing down the process, to enable them to cope with it in their future professional life.</p> </li> <li> <p>They will be assessed both on the quality of the final web site design presentation and the way they handled the critical situation during the project development.</p> </li> </ul>"},{"location":"Acceuil/#course-schedule-from-february-26-to-march-22","title":"Course schedule: From February 26 to March 22","text":""},{"location":"Acceuil/#week-1-from-february-26-to-march-1","title":"Week 1: From February 26 to March 1","text":"<p>Chapter 1: Introduction to the web</p> <ul> <li>History of the web</li> <li>Client-server architecture</li> <li>Static vs dynamic web</li> <li>The difference between front-end and back-end </li> <li>Website editors and frameworks</li> </ul> <p>Chapter 2: Master the basic technologies of client-side Web development</p> <ul> <li>HTML: presentation, DOM, structuring an html page and the notion of tags </li> <li>CSS: presentation, selector types and responsive design</li> <li>JavaScript basics: Basic concepts, functions and arrays, callback Functions, - events and DOM manipulation</li> <li>Advanced JavaScript: Objects, JSON and Storage. </li> </ul> <p>Practical work</p> <ul> <li>Project presentation</li> <li>Create groups</li> <li>Choose a project theme</li> <li>Creation of HTML, CSS and JavaScript pages for the project</li> </ul>"},{"location":"Acceuil/#week-2-from-march-4-to-march-8","title":"Week 2: From March 4 to March 8","text":"<p>Chapitre 3: Discover a modern web framework: Vue.Js</p> <ul> <li>Introduction to Vue.js</li> <li>Installation</li> <li>Vue instance </li> <li>Directives Vue.js </li> <li>Components </li> <li>Single File Component (SFC) </li> <li>Vue Router </li> </ul> <p>Practical work </p> <ul> <li>Creation of a Vue CLI project</li> <li>Translation of project pages (html, css and javascript) into components</li> <li>Configuration of the different routes in index.js file.</li> </ul>"},{"location":"Acceuil/#week-3-from-march-11-to-march-15","title":"Week 3: From March 11 to March 15","text":"<p>Chapitre 4: Introduction to the server side</p> <ul> <li>Web server definition </li> <li>HTTP / HTTPS protocols </li> <li>HTTP request methods (GET, POST) </li> </ul> <p>Chapitre 5: Node.js / Express.js</p> <ul> <li>Introduction to Node.js</li> <li>Node.js modules</li> <li>Framework Express.js</li> <li>Callbacks and Promises</li> </ul> <p>Practical work </p> <ul> <li>Implement http methods on the project website.</li> </ul>"},{"location":"Acceuil/#week-4-from-march-18-to-march-22","title":"Week 4 : From March 18 to March 22","text":"<p>Chapitre 6: Authentication and database (security, data persistence)</p> <ul> <li>Authentication: user registration, hash with bcrypt</li> <li>Connecting a MySQL database to a Node.js application</li> <li>Executing SQL queries on a MySQL database with NodeJS</li> <li>Using a MySQL database in NodeJS with Sequelize</li> </ul> <p>Practical work</p> <ul> <li>Create and configure a database for project website.</li> <li>Final presentation: demonstration of the project functionalities</li> </ul>"},{"location":"Acceuil/#suggested-resources","title":"Suggested resources","text":"<ul> <li>Mozilla Developer Network(MDN) :developper mozzilla</li> <li>StackOverflow :stackoverflow </li> </ul>"},{"location":"Chapter%201/","title":"Chapter 1 : An introduction to the web","text":""},{"location":"Chapter%201/#table-of-contents","title":"Table of contents","text":"<ul> <li>History of the web</li> <li>Client-server architecture</li> <li>Static vs dynamic web</li> <li>The difference between front-end and back-end </li> <li>Website editors and frameworks</li> </ul>"},{"location":"Chapter%201/#the-web-what-you-need-to-know","title":"The Web: what you need to know!","text":""},{"location":"Chapter%201/#a-little-bit-of-history","title":"A little bit of history\u2026","text":""},{"location":"Chapter%201/#what-is-the-internet","title":"What is the Internet?","text":"<p>A global computer network consisting of a set of national, regional and private networks (networks of networks), which are linked by the TCP/IP communication protocol and which work together to provide a unique interface to their users.</p> <p>TCP/IP communication protocol: (Transmission Control Protocol/Internet Protocol) Is a set of rules used to enable communication between devices on a computer network. It is widely used as a communications protocol on the Internet, and is also used in many local area networks (LANs) and corporate networks.</p>"},{"location":"Chapter%201/#network-computer-network","title":"Network &amp; Computer network","text":""},{"location":"Chapter%201/#communication-protocol-tcpip-suite","title":"Communication protocol &amp; TCP/IP suite","text":""},{"location":"Chapter%201/#the-key-players-of-the-internet","title":"The key players of the Internet","text":""},{"location":"Chapter%201/#some-examples-of-internet-protocols","title":"Some examples of Internet protocols","text":""},{"location":"Chapter%201/#internet-services","title":"Internet services","text":""},{"location":"Chapter%201/#world-wide-web-www","title":"World Wide Web (WWW)","text":""},{"location":"Chapter%201/#web-evolution","title":"Web evolution","text":""},{"location":"Chapter%201/#how-does-the-web-work","title":"How does the Web work?","text":""},{"location":"Chapter%201/#web-servers","title":"Web servers","text":"<p>\u2794 A program can be both server and client of other servers. \u2794 retrieving a web page that contains information from a database </p> <p></p>"},{"location":"Chapter%201/#client-server","title":"Client / Server","text":"<p>\u2022 The DNS (Domain Name System) protocol allow to match an IP address with a name in order to avoid to retain IP addresses. Exemple : 195.83.142.250 \u2794</p> <p></p> <p>\u2022 The FQDN allows access to a machine on which a number of resources are available and which are served by different protocols. \u2022 A URL (Uniform Resource Location) allows to specify which resources to reach, and with which protocol.</p> <p></p>"},{"location":"Chapter%201/#static-vs-dynamic-web","title":"Static vs dynamic web","text":""},{"location":"Chapter%201/#a-static-web-page","title":"A static WEB page","text":"<p>\u2022 Visible as designed \u2022 Can present different forms of content: images, flash animations, video, music, etc. \u2022 Its content does not change =&gt; Static  \u2022 Stored in the Web server which only displays it when requested  \u2022 The entire code that composes it is interpreted directly by the client (Web browser) </p> <p></p>"},{"location":"Chapter%201/#composition-of-a-web-page","title":"Composition of a web page","text":""},{"location":"Chapter%201/#example-of-a-web-page-managing-a-cv-library","title":"Example of a web page managing a CV-library","text":"<p>\u2022  File://  : local protocol       - Files must be accessible on the machine used to view them       - Files are not served by a web server \u2022  http:// : client-server protocol       - Files are retrieved from the web server machine to the client machine (web browser)       - Files are served by a server usually on another machine </p> <p> Rq  :(firefox et chrome) :[ctrl]+[maj]+i  gives access to a tool panel allowing to visualize the network exchanges</p> <p></p>"},{"location":"Chapter%201/#static-web-advantages-and-disadvantages","title":"Static Web: advantages and disadvantages","text":""},{"location":"Chapter%201/#a-dynamic-web-page","title":"A dynamic web page","text":""},{"location":"Chapter%201/#dynamic-web-site-advantages","title":"Dynamic Web site: advantages","text":""},{"location":"Chapter%201/#dynamic-web-site-disadvantages","title":"Dynamic Web site: disadvantages","text":""},{"location":"Chapter%201/#the-difference-between-front-end-and-back-end","title":"The difference between front-end and back-end","text":""},{"location":"Chapter%201/#the-back-end-its-competences","title":"The Back-end: its competences","text":"<p>The Back-End is divided into three essential parts:  Server (or web hosting): seen as a hard disk accessible 24 hours a day, on which the pages of the website are stored. Databases: comparable to a large table with columns containing the necessary information on which the development is based, for example \"name\", \"first name\", \"password\", \"current purchase\". Dynamic programming languages: allow to keep, process, modify data and provide updated information on a website (such as news, product sheets, images, videos, etc.). The most used languages are PHP, Ruby, Python, SQL  Frameworks: to make the code clearer, easier to modify and simpler to maintain as a team, for example: CakePHP, Symphony</p>"},{"location":"Chapter%201/#website-editors-and-frameworks","title":"Website editors and frameworks","text":""},{"location":"Chapter%201/#website-editors","title":"Website editors","text":""},{"location":"Chapter%201/#some-examples","title":"Some examples","text":""},{"location":"Chapter%201/#frameworks","title":"Frameworks","text":""},{"location":"Chapter%201/#content-management-system-cms","title":"Content Management System (CMS)","text":""},{"location":"Chapter%201/#content-management-system-some-examples","title":"Content Management System (Some examples)","text":""},{"location":"Chapter%201/#content-management-system-useful-links","title":"Content Management System (Useful links)","text":""},{"location":"Chapter%202/","title":"Chapter 2 : Master the basic technologies of client-side Web development","text":""},{"location":"Chapter%202/#table-of-contents","title":"Table of contents","text":"<ul> <li>HTML: presentation, DOM, structuring an html page and the notion of tags </li> <li>CSS: presentation, selector types and responsive design</li> <li>JavaScript basics: Basic concepts, functions and arrays, callback Functions, - events and DOM manipulation</li> <li>Advanced JavaScript: Objects, JSON and Storage. </li> </ul>"},{"location":"Chapter%202/#introduction","title":"Introduction","text":""},{"location":"Chapter%202/#web-page-languages-frontend","title":"Web page languages Frontend","text":""},{"location":"Chapter%202/#why-learn-these-languages","title":"Why learn these languages?","text":""},{"location":"Chapter%202/#the-w3c-world-wide-web-consortium","title":"The W3C ! (World Wide Web Consortium)","text":"<p>Check your code : https://validator.w3.org/</p>"},{"location":"Chapter%202/#html-hypertext-markup-language","title":"HTML : HyperText Markup Language","text":"<p> HTML : its versions</p> <p></p> <p> HTML : the basics </p> <p></p> <p> HTML : the Doctype </p> <p> <code>&lt;!DOCTYPE html&gt;</code>  \u2022 A Doctype is a line of code used to indicate the type of your document. \u2022 It specifies the defined standards that you will use in this document. \u2022 The line of code containing the Doctype is inserted at the very beginning of the page. You can place it on the first line of your HTML document if you wish.  \u2022 The Doctype should always be before the <code>&lt;HTML&gt;</code> tag. \u2022 For a developer, the Doctype is used to validate his pages according to the chosen W3C standards.  \u2022 Its main purpose is to tell browsers how to interpret the document - or web page.With the arrival of HTML 5, the doctype was thus simplified to the maximum: </p> <p> Create your first web page  To create a web page, all you need to do is:  - Use your favorite text editor (Visual studio code, Sublime Text or other).  - Create a file with the \".html\" extension and save it  - Open the file you've created by double-clicking on the file icon, which by default will be your browser's icon. </p> <p>A web page is made up of two parts:</p> <ul> <li>The <code>&lt;head&gt;</code> header: general information about the page: its title, encoding (for handling special characters), etc.</li> </ul> <p>This information is not displayed on the page \u2794 information intended for the computer</p> <ul> <li>The body <code>&lt;body&gt;</code>: this is where the main part of the page is located; anything written here will be displayed on the screen.</li> </ul> <p> </p> <p>To execute the html page, you need to run the file: </p> <p> </p> <p> Html: Basics </p> <ul> <li>Any open tag must be closed: <code>&lt;tag&gt; ... &lt;/tag&gt;</code>     \u2022 Example: <code>&lt;html&gt; ... &lt;/html&gt;</code></li> <li>Empty tags can be self-closing:     \u2022 Example : <code>&lt;br/&gt;</code></li> <li>Nesting possible but no overlap:      \u2022 Example : <code>&lt;tag 1&gt;&lt;tag 2&gt;&lt;/tag 1&gt;&lt;/tag 2&gt;</code>\u2794 <code>&lt;tag 1&gt; &lt;tag 2&gt; &lt;/tag 2&gt; &lt;/tag 1&gt;</code> </li> <li>DOCTYPE is case-sensitive </li> <li>Attributes always have a value, and the value is always enclosed in single or double quotation marks. </li> <li>Attributes are separated from their value by \"=\". </li> <li>Attributes are separated from each other by at least one blank character (space, line feed, tab). </li> </ul> Note: In HTML 5, attributes are not case-sensitive, but this is not the case in XML dialects: attributes must always be written in lower case. <p> Examples of tags   - The paragraphs: <code>&lt;p&gt; paragraph &lt;/p&gt;</code>   - Go to line: <code>&lt;br&gt;</code>   - Titles:     \u00a0\u00a0\u2022 <code>&lt;h1&gt;text&lt;/h1&gt;</code> : means \"very, very important     \u00a0\u00a0\u2022 <code>&lt;h2&gt;text&lt;/h2&gt;</code> : means \"very important     \u00a0\u00a0\u2022 <code>&lt;h3&gt;text&lt;/h3&gt;</code> : means \" important     \u00a0\u00a0\u2022 <code>&lt;h4&gt;text&lt;/h4&gt;</code> : means \" less important     \u00a0\u00a0\u2022 <code>&lt;h5&gt;text&lt;/h5&gt;</code> : ...     \u00a0\u00a0\u2022 <code>&lt;h6&gt;text&lt;/h6&gt;</code> : ...</p> <p> </p> <p>to see more html elements visit this link:more html elements </p> <p> Html: attributes </p> <ul> <li>Attributes contain additional information about the element, but do not appear in the actual content. </li> <li>The class attribute gives the element an identifying name that will be used for it </li> <li>Several elements can belong to the same class.</li> </ul> <p> </p> <p>Html: images </p> <p> </p> <p>There are several attributes that can be defined:  \u00a0\u00a0  - src source image [URI or file name] alt  \u00a0\u00a0  - alt in this attribute, you specify a descriptive text for users who can't see the image (e.g. something went wrong and the image isn't displayed).  \u00a0\u00a0  - height in pixels  \u00a0\u00a0  - width in pixels  \u00a0\u00a0  - align to the left, right, top, middle or bottom </p> <p>Html: Lists and links Lists:  \u00a0\u00a0  - Unordered lists <code>&lt;ul&gt; + &lt;li&gt;</code>  \u00a0\u00a0  - Ordered lists <code>&lt;ol&gt; + &lt;li&gt;</code></p> <p> </p> <p>Links: </p> <p> </p> <p>Html: Tables</p> <p> </p> <p>Html: Header and footer tags</p> <ul> <li> <p><code>&lt;header&gt;</code>: represents introductive content, generally a group of introductive or navigator content. It may contain title elements, but also other elements such as a logo, a search form, the author's name, etc.  </p> </li> <li> <p><code>&lt;footer&gt;</code>: represents the footer of the nearest section or section root. An element usually contains information about the section's author, copyright data or links to other related documents. </p> </li> </ul> <p>Html: \u00ab article \u00bb , \u00ab section \u00bb, \u00ab nav \u00bb and \u00ab div \u00bb tags</p> <ul> <li><code>&lt;article&gt;</code>: represents an autonomous composition in a document, page, application or site, intended for independent distribution or reuse.  Rq: A given document may contain several articles. </li> <li><code>&lt;section&gt;</code>: represents a generic section of a document. Rq: a section generally begins with a title </li> <li><code>&lt;nav&gt;</code>: represents a section of a page with links to other pages or fragments of that page. </li> <li><code>&lt;div&gt;</code>:(or division) is the generic container for stream content. As a \"pure\" container, the element represents nothing in itself. Instead, it's used to group content together so that it can be easily styled using the class or id attributes, to mark a section of a document as being written in a different language (using the lang attribute), and so on. Rq: This tag will be interesting to study when you discover CSS. </li> </ul> <p>Html: Multimedia tags </p> <ul> <li> <p><code>&lt;video&gt;</code> : integrates a video player directly into the page, with Play and Pause buttons and a progress bar, volume control... </p> </li> <li> <p><code>&lt;audio&gt;</code>: same as the video tag, but for audio. Each browser uses its own design to style its player. But it's also possible to create your own design, if you want a uniform look. </p> </li> <li> <p><code>&lt;canvas&gt;</code>:the most exciting tag of all!!! It's a form of surface on which shapes can be traced and animated. It offers revolutionary possibilities for video game development. Coupled with WebGL for 3D graphics rendering, impressive results can be achieved within the browser itself. </p> </li> </ul> <p>Html: Forms </p> <ul> <li><code>&lt;form&gt;</code>: represents a form, i.e. a section of a document containing interactive controls enabling a user to provide information.</li> <li><code>&lt;input&gt;</code>: used to create an interactive control in a web form that allows the user to enter data. The element's input options and behavior are highly dependent on the value specified in its type attribute and its other attributes.  To see more of the tags used in forms, please visit: tags for forms</li> </ul>"},{"location":"Chapter%202/#css-cascading-style-sheet","title":"CSS: Cascading Style Sheet","text":"<p> CSS: Presentation  </p> <ul> <li>Introduced in 1996</li> <li>CSS 1 \u2192 CSS 2.0 \u2192 CSS 2.1 \u2192 CSS 3 </li> <li>A language that complements HTML </li> <li>A langage that manages the layout of your site </li> <li>A langage that allows you to choose colors, selects fonts, defines text size, borders, background, etc. </li> <li>A langage that Allows you to lay out your site; menu layout, width, header position ...</li> </ul> <p></p> <p> CSS: Example  </p> <p> CSS: Syntax  </p> <ul> <li>Selector: the element(s) to be styled </li> <li>Declaration: a single rule specifying the properties of the element you want to style</li> <li>Properties: the ways in which you can style a given html element</li> <li>Property value; choose one of the many possible appearances for a given property</li> </ul> <p></p> <ul> <li>Each rule element must be surrounded by braces { }.</li> <li>In each declaration, use a colon \":\" to separate properties from their values.</li> <li>Use a semicolon \";\" to separate each declaration from the next.</li> </ul> <p>You can also select multiple elements and apply a single set of rules to each of them. Separate multiple selectors with commas. For example:  </p> <p> Some CSS properties  </p>"},{"location":"Chapter%202/#css-3","title":"CSS 3","text":"<ul> <li>All new features since CSS 2.1</li> <li>Enriches the style sheets:             - New effects,             - New selectors,             - New ways to specify colors,             - Detection of the user's device,</li> <li>Calculations in a style sheet...</li> <li>Rounded borders</li> <li>Vendor prefixes</li> <li>Visual effects</li> <li>Selectors</li> </ul> <p> CSS : selector </p> <p>A type selector targets an HTML element (a tag) in your document:</p> <ul> <li> <p>Type selector : you just have to specify the name of the html tag</p> </li> <li> <p>Universal selector ( * ): allows to select all the document</p> </li> <li> <p>Class selector : start with a point (.)</p> <ul> <li> <p>Select any element to which this class is applied</p> </li> <li> <p>Select elements of a given type</p> </li> <li> <p>Select an element belonging to several classes</p> </li> </ul> </li> <li> <p>ID selector: start with (#) used in the same way as a class selector but an ID cannot have a duplicate in the same document</p> </li> <li> <p>Attribute selector: matches elements based on the presence or value of a given attribute.</p> </li> </ul> <p> CSS : Cascade, inheritance and specificity </p> <p>Objectives: Control how CSS is applied to HTML and how conflicts are resolved</p> <p>Why: A CSS that does not apply as wanted to an element!</p> <p>=&gt; Creation of several rules to apply on the same element</p> <p>Solution : Creation of several rules to be applied on the same element voici comment faire une structure html. </p> <p> Cascade </p> <p>Order of appearance of the rules in the CSS </p> <p>=&gt; 2 rules with the same specificity: the last one will be applied</p> <p>Example: Color will have the final value Blue</p> <p></p> <p> Specificity </p> <p>Specificity measures how precise the selection is:</p> <ul> <li> <p>Low specificity selector: targets all elements of a given type: low rating</p> </li> <li> <p>More specific selector: only targets elements with the class attribute of the specified value: high rating</p> </li> </ul> <p></p> <p>Inheritance</p> <p>Some values for a CSS property are passed from parent elements to their children, others are not.</p> <p></p> <p>Warning: Properties such as width, margins, fill, and borders are not inherited.</p> <p>Inheritance: properties</p>      - Inherit : inheritance enabled     - Initial : default value     - unset : reset the property to its natural value <p></p>"},{"location":"Chapter%202/#responsive-design","title":"Responsive Design","text":"<ul> <li>A responsive interface adapts to the size of the screen, while remaining comfortable to use. =&gt; Need to design websites which can be viewed from any terminal, desktop PC or cell phone, with a comparable comfort of use. </li> </ul> <p>Responsive: the key steps</p> <ul> <li>Responsive web design :    1st step : device : take the ring road into account =&gt; viewport.   2d step : mobile first : css for mobile first =&gt; min-width, max-width, min-height, max-height   3rd step : media query : define breakpoint  </li> </ul> <p>Step 1 : Viewport</p> <p>The viewport declaration must be placed in ALL HTML pages of the website, in the head section. </p> <p>Step 2: Define dimensions and set limits</p> <ul> <li>Define dimensions in relative units: For margins, element dimensions, etc. Relative length units specify a length relative to another length property. The most commonly used unit is the percentage. It is relative to the parent element. \u2192 So all dimensions are proportional to those of the screen</li> <li>Set limits: 4 properties allow to set min-width, max-width, min-height and max-height limits  \u2192 Unlike the other dimensions, these values will be defined in absolute units (e.g. pixels)</li> </ul>"},{"location":"Chapter%202/#media-query","title":"Media query","text":"<p>The media queries allow, while remaining on a screentype terminal, to filter styles according to the size of this screen. @media applies CSS rules to a specific device. By using this attribute, it is therefore possible to define specific layouts for each device: screen, printer, smartphone, etc.</p> <p></p>"},{"location":"Chapter%202/#flexbox","title":"Flexbox","text":"<ul> <li> <p>Flexbox, or flexible boxes, is a new property introduced in CSS3. They make adaptive design much easier. </p> </li> <li> <p>With flex-wrap, if the elements are too big to fit on one line, they will move to another line</p> </li> </ul> <p></p> <ul> <li>Flex-flow : shorthand property that specifies the direction of a flex container, as well as its wrapping behavior.</li> </ul> <p></p>"},{"location":"Chapter%202/#javascript-basics","title":"Javascript Basics","text":"- Html : creating content   - Css : organizing content   - Javascript : to interact with the user  <p>Javascript : what is it? </p> <ul> <li> <p>Abbreviated as \"JS\", it is a lightweight scripting language, mainly known as the scripting language for web pages.</p> </li> <li> <p>It is a dynamic language;</p> </li> <li> <p>The code is mainly interpreted by the client browser (interpretation depending on the browser type and version).</p> </li> <li> <p>Event-driven language (association of actions to events triggered by the user (mouseover, click, keyboard input, etc.).</p> </li> <li> <p>Also used in many non-browser environments such as Node.js, Apache CouchDB and even Adobe Acrobat.</p> </li> </ul> <p> Javascript at the beginning! </p> <p>The term JavaScript has remained in the common vocabulary, but in fact it is ECMAScript</p> <ul> <li> <p>Invented in 1995 by Brendan Eich for Netscape and its browser,</p> </li> <li> <p>ECMAScript specification validated by Ecma International in June 1997 ECMA 262 standard</p> </li> <li> <p>ECMAScript standardized in its version 5 in December 2009</p> </li> <li> <p>ES 2015 was released in June 2015. This version was successively called ECMAScript Harmony, ECMAScript 6 and ECMAScript 2015</p> </li> </ul> <p> Advantages and disadvantages </p> <p></p> <p> Where to put the Javascript? </p> <p>3 options :</p> <ol> <li>In the opening tag of an HTML element: </li> <li>In a script element, within an HTML page:  </li> <li>In a separate file containing only JavaScript and with the extension .js:  Javascript : syntax </li> <li>JavaScript is case sensitive.</li> <li>In JavaScript, statements are separated by semicolons.</li> <li>If there are multiple statements on a single line, then they must be separated by a semicolon.</li> <li>Comments:  Javascript : Declaration and initialization of variables</li> </ol> <p>To declare a variable in JavaScript, two options: - The \u00ab var \u00bb keyword : declare a variable and possibly initialize its value  - The \u00ab let \u00bb keyword : allows you to declare variables that are limited to the scope of a block statement, or expression on which it is used, unlike the var keyword, which declares a variable globally, or locally to an entire function regardless of block scope. one of these keywords must be followed by the name we want to give to our variable. It is also possible to define a constant using the keyword \u00ab const \u00bb </p> <p>Notes : 1. A variable declared using the var or let statement without a defined initial value will be worth undefined  2. Variable names are called identifiers 3. A JavaScript identifier must begin with a letter, an underscore <code>(_)</code>, or a dollar sign <code>($)</code> let vs var </p> <p>Javascript: operators, concatenation</p> <ul> <li> <p>Operators:  <code>+, -, /, *, %, == (values), === (values and types), !=(value), !==(values or types), &lt;, &gt;,</code> etc  </p> </li> <li> <p>Concatenation:  </p> </li> <li> <p>Display:  </p> </li> </ul> <p>Javascript: Conditional structure</p> <ul> <li>Simple conditional structures:</li> </ul> <p><pre><code>  var x=1;\n   if(x&gt;1)\n   {alert('The value of x is greater than 1');\n   }else{\n    alert('The value of x is less than 1')\n   }\n</code></pre> - Multiple conditional structure: </p> <p><pre><code>var =1 \nif(x&gt;1)\n   {alert('The value of x is greater than 1');\n   }else if(x==1){\n    alert('The value of x is equal to 1')\n   }else{\n    alert('The value of x is less than 1')\n   }\n\nswitch(x){\n    case 0: alert('The value of x is greater than 1');\n    break;\n    case 1: alert('The value of x is equal to 1');\n    break;\n    case 2:alert('The value of x is less than 1');\n    break;\n    default: alert('I dont know!');\n}\n</code></pre> Javascript: Loop structure</p> <p><pre><code>//while loop\nvar x=0;\nwhile(x&lt;10){\n    x++;\n}\n\n//do while loop\ndo{\n    x++;\n}while(x&lt;10);\n\n//For loop\nfor(let i=0;i&lt;10;i++)\n{\n    x++;\n}\n</code></pre> Javascript:function</p> <ul> <li>You can create a function using the obvious keyword \"function\" </li> </ul> <p><pre><code>function random_integer(){\n    return Math.random()*100;\n}\n\nfunction Multiplication(number1,number2)\n{\n    return numbre1+ '*' +numbre2+ '=' + (numbre1+number2);\n}\n</code></pre> - A function can be anonymous(not have a corresponding name): </p> <pre><code>var carr\u00e9=function(n){\n    return n*n;\n}\n\nvar x=carr\u00e9(4);\n</code></pre> <ul> <li>Notes: The declaration of a function can be made after the call</li> </ul> <p>Javascript:events</p> <ul> <li>JavaScript = reactive language \u2192 like a sequence of events that occur in time</li> <li>User interaction is managed through events</li> <li>Event = action or event that occurs in the system and that the system informs you about in order to respond to</li> <li>Events are usually HTML attribute names, the content of these attributes will be JavaScript.</li> <li>In general, JavaScript makes it possible to link a JavaScript instruction with each event: either via the call to a basic JavaScript function, or via the call to one of our own procedures.</li> </ul> <p>Javascript:event detection</p> <p></p> <p>Javascript : functions used with a user action</p> <p>Some examples :  - alert : opens a window with a given message, - modifier window.location to go to another page, - document.write: writes a given text, - setTimeout et setInterval allow respectively to delay and to repeat an instruction; - focus : allows to activate an element of the page (like the box to be filled in a form), blur to deactivate it.</p> <p><pre><code>//trigger immediate alert (alert)\n&lt;button onclikc=\"alert('Hi!')\"&gt;click here!&lt;/button&gt;\n\n//alert triggered in half a second(setTimeout)\n&lt;button onclick=\"setTimeout('alert(\\'Surprise!\\')',500)\"&gt;click here!&lt;/button&gt;\n\n//repeat every 5 seconds (setInterval)\nvar clock_id=setInterval('alert(\\'hi hi !\\');',5000);\n\nclearInterval(clock_id);//end of repeat\n</code></pre> DOM : Document Object Model</p> <ul> <li>The DOM represents HTML as a structure of tree structure of tags.</li> </ul> <p></p> <ul> <li>DOM: structured representation of the document in the form of a tree.</li> <li>DOM: defines how the structure can be manipulated.</li> <li>JavaScript interacts with the page via the DOM structure accessible via a variable called \"document\".</li> <li>DOM: accessing one or more elements</li> <li>To access an element by its \" id \", use \" GetElementById \".</li> <li>If an HTML element has an \"id\", a variable is created for it.</li> </ul> <p>DOM : Access to the element</p> <p>To access a DOM element, you can use: - By its id attribute - By its class attribute - By its tag - By a CSS selector - By its name attribute</p> <p></p>"},{"location":"Chapter%202/#javascript-synchronous-vs-asynchronous","title":"Javascript: Synchronous Vs Asynchronous","text":"<p>Asynchronous in Javascript</p> <ul> <li>In computer science, two operations are said to be synchronous when the second one waits for the first one to finish its work before starting (dependency)</li> <li>Two operations are said to be asynchronous in computer science when they are independent, i.e. when the second operation does not need to wait for the first to finish before starting.</li> <li>In JavaScript, each line of code is executed synchronously, but it is possible to request to execute code asynchronously i.e. actions can be executed independently of the main execution flow </li> <li>In JavaScript, asynchronous operations are put in queues that will execute after the main thread has finished its operations. They do not block the execution of the rest of the JavaScript code </li> <li> <p>Example of asynchronous functions setTimeout setInterval setImmediate </p> </li> <li> <p>The function setTimeout: this is the most common function when you want to execute asynchronous code without blocking the current execution thread.  \u2192 This function takes 2 parameters:</p> </li> <li>The function to be executed asynchronously (which will be added to the event loop queue) ;</li> <li>The time delay, in milliseconds, before executing this function.</li> </ul> <p><pre><code>setTimeout(function(){\n    console.log(\"I'm here!\")\n},5000);\nconsole.log(\"Where are you?\");\n//The message \"where are you?\"\" will display before \"I'm here!\",which will only be displayed after 5 seconds\n</code></pre> Callback function</p> <ul> <li>A \"callback\" function is a function passed as an argument to an asynchronous function and which will be called at the end of the execution of the latter.</li> </ul> <p><pre><code>//function \nfunction greet(name, callback)\n{\n    console.log('Hi'+ ' '+ name);\n    callback();\n}\n//callback function\nfunction callMe(){\n    console.log('I am callback function');\n}\n\n//passing function as an argument\ngreet('Efrei', callMe);\n</code></pre> \u2192 When we pass a function as a parameter, we just give its name, without the parentheses (the presence of parentheses causes a function call) </p>  Rq: This can turn into a callback hell if you have several callbacks where each one requires the result of the previous operation <p>The Promise object</p> <ul> <li>A promise is an object that is returned and to which callbacks are attached rather than passing callbacks to a function.</li> <li>The \"Promise\" object which represents the completion or failure of an asynchronous operation. \u27a2 A promise is an object that is returned and to which callbacks are attached, rather than passing callbacks to a function. \u27a2 A promise in JavaScript is an object that represents the state of an asynchronous operation \u27a2 An asynchronous operation can be in one of the following states :        \u2022 Operation in progress (not completed)       \u2022 Operation successfully completed (promise resolved)       \u2022 Operation completed or more precisely stopped after a failure (promise rejected)</li> </ul> <p><pre><code>const promesse=new Promise((resolde,reject))=&gt;{\n    //asynchrone task to realise\n    //call resolve function if the promise is resolved\n    //or\n    //call reject function if the promise is rejected\n}\n</code></pre> The Anonymous function and arrow function</p> <ul> <li>An arrowed function allows to have a shorter syntax</li> <li>It is possible to define a function directly inside another function</li> </ul> <p></p> <p>The The scope</p> <ul> <li>Scope is often referred to when talking about global and local variables</li> </ul> <p><pre><code>function mafonction(){\n    const terme='secret';\n    return 'Hello everybody';\n}\nconsole.log(mafonction());\nconsole.log(terme);\n</code></pre> - The variable myfunction of type function has a global scope to the script  - The term variable is defined in the secret function and is therefore not accessible outside the scope of the function - Conversely, what is defined outside a function is accessible inside a function</p>"},{"location":"Chapter%202/#objects-in-javascript","title":"Objects in JavaScript","text":"<ul> <li> <p>Objects in JavaScript :   \u27a2 Javascript uses the \"objects\" paradigm    \u27a2 A Javascript object is an entity in itself that has properties and a type    \u27a2 The JavaScript environment provides native (predefined) objects (Date, String, Math, etc...), but it is possible to build new objects    \u27a2 An object is defined with 3 elements :</p> <ul> <li>its constructor,</li> <li>its properties </li> <li>its methods (functions specific to the object) </li> </ul> </li> <li> <p>To see more about object creation, please visit this link : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object</p> </li> <li> <p>Example 1 : creation of an object called \"Person\" </p> </li> </ul> <pre><code>// Definition of the object person\nlet Person = {\n  name: \"Zouhour\",\n  surname: \"Guiras\",\n  age: 33,\n\n  // method to display person information\n  DisplayDetails: function() {\n    console.log(\"name:\", this.name);\n    console.log(\"Surname:\", this.surname);\n    console.log(\"Age:\", this.age);\n  },\n\n  // Method to change the name\n  changeName: function(newName) {\n    this.name = newName;\n  }\n};\n// Display initial person information\nconsole.log(\"Display initial person information\");\nPerson.DisplayDetails();\n\n// Change person name\nPerson.changeName(\"Jane\");\n\n// Display new person information\nconsole.log(\"\\n updated person information\");\nPersonne.DisplayDetails();\n</code></pre> <ul> <li>Example 2: Manage a date object </li> </ul> <pre><code>// Create an object date which presents the current date. \nlet currentDate = new Date();\n\n// display current date\nconsole.log(\"Current Date :\", currentDate);\n\n// get the year\nlet year = currentDate.getFullYear();\nconsole.log(\"current year :\", year);\n\n// get month (0-11)\nlet month = currentDate.getMonth();\nconsole.log(\"Current month:\", month);\n\n// get day of the month (1-31)\nlet day = currentDate.getDate();\nconsole.log(\"Current day of the month :\", day);\n\n// get day of the week (0-6)\nlet dayweek = day.getDay();\nconsole.log(\"Current day of the week :\", day week);\n\n// get hour\nlet hour = currentDate.getHours();\nconsole.log(\"Current hour :\", hour);\n\n// get minutes\nlet minutes = currentDate.getMinutes();\nconsole.log(\"Current minutes:\", minutes);\n\n// get seconds\nlet seconds = currentDate.getSeconds();\nconsole.log(\"Current Seconds :\", seconds);\n\n// get milliseconds\nlet milliseconds = currentDate.getMilliseconds();\nconsole.log(\"Current millisecondes :\", milliseconds);\n</code></pre>"},{"location":"Chapter%202/#the-iterable-object-array","title":"The iterable object : Array","text":"<ul> <li>Object used to create arrays</li> <li>Array objects have methods to browse and modify their contents</li> <li>To see the list of methods that can be used to manipulate arrays, please visit this link : https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Array </li> </ul> <pre><code>let students=['Jean','Paul','David'];\nconsole.log(students.length);\n// it will display 3\n// The access to an element of the array is done via its index \nlet first=students[0];\n//Jean\nlet second=students[2];\n//David\n//Loop on the content of the table\nstudents.forEach(function(item, index, array)\n{\n    console.log(item,index);\n\n});\n// Jean 0\n// Paul 1\n// David 2\n\n//Add to end, remove from start/end an element \nlet new=students.push('Zouhour');\nlet last=students.pop();\nlet first=students.shift();\n</code></pre>"},{"location":"Chapter%202/#the-json-format","title":"The JSON format","text":"<ul> <li>JSON : JavaScript Object Notation</li> <li>Standard format used for representing structured data in a way similar to JavaScript objects</li> <li>Developed by Douglas Crockford</li> <li>Can be used in many other programming languages</li> <li>JSON: string that is converted into a native Javascript object (parsing)</li> <li>JS provides a global JSON object with methods to perform the conversion</li> <li>A JSON object can be stored in a file with the extension .json and the MIME Type application/ json</li> <li> <p>Allows to prioritize data</p> </li> <li> <p>Example: </p> </li> </ul> <p><pre><code>{\n  \"students\": [\n    {\n      \"name\": \"Dupont\",\n      \"surname\": \"Jean\",\n      \"age\": 20\n    },\n    {\n      \"name\": \"Martin\",\n      \"surname\": \"Marie\",\n      \"age\": 22\n    },\n    {\n      \"name\": \"Dubois\",\n      \"surname\": \"Pierre\",\n      \"age\": 21\n    }\n  ]\n}\n</code></pre> The JSON object</p> <ul> <li>Objet global javascript</li> <li>Contains methods for :<ul> <li>interpreting JSON</li> <li>converting values to JSON</li> </ul> </li> </ul> <p>\u2192 Parse: parse the string as JSON   \u2022 If needed, transform the produced value and its properties and return the value    \u2022 Syntaxe : <code>JSON.parse(texte[, revivificateur])</code>  \u2192 stringify: Returns a JSON string corresponding to the specified value    \u2022 Includes some properties    \u2022 Replaces property values in a way defined by the user.    \u2022 Syntaxe : <code>JSON.stringify(valeur[, remplacement[, expace]])</code></p> <ul> <li>Example: Suppose you have a JSON file called students.json containing the data shown above: </li> <li>To convert the content of the JSON file into a JavaScript object, use the method <code>JSON.parse()</code></li> </ul> <pre><code>  const fs = require('fs');\n  // Read the content of the JSON file\n  let jsonData = fs.readFileSync('students.json', 'utf-8');\n  // Convert the content of json file to an object js\n  let dataObj = JSON.parse(jsonData);\n  // display the different students\n  console.log(dataObj); \n</code></pre> <ul> <li>To convert a JavaScript object into a JSON string, use the method : <code>JSON.stringify()</code></li> </ul> <pre><code>const fs = require('fs');\n\n// Objet JavaScript represents students\nlet students = [\n  {\n    name: \"Smith\",\n    surname: \"John\",\n    age: 23\n  },\n  {\n    name: \"Johnson\",\n    surname: \"Emily\",\n    age: 21\n  }\n];\n\n// Convertir the objet JavaScript to a string JSON\nlet jsonData = JSON.stringify({ students: students }, null, 2);\n\n// write the string json into a file\nfs.writeFileSync('new_students.json', jsonData, 'utf-8');\n</code></pre>"},{"location":"Chapter%202/#practical-work","title":"Practical work","text":""}]}